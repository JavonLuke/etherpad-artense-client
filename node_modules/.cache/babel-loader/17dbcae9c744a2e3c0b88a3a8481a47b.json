{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JP\\\\Documents\\\\GitHub\\\\etherpad-artense-client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport * as api from \"./api/server\"; //const eejs = require('ep_etherpad-lite/node/eejs/');\n//const settings = require('ep_etherpad-lite/node/utils/Settings');\n//exports.eejsBlock_editbarMenuRight = function (hook_name, args, cb) {\n//  args.content = eejs.content=\"foo\"; return cb(); };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [padID, setPadID] = useState(undefined);\n  const [groupID, setGroupID] = useState(undefined);\n  const [authorID, setAuthorID] = useState(undefined);\n  const [sessionID, setSessionID] = useState(undefined);\n  const [etherpad, setEtherpad] = useState(undefined); //etherpad.createPad('howdy', [\"kekek\"])\n  // group\n\n  useEffect(() => {\n    api.createAuthor();\n  });\n  /*  \n  let api1 = require(\"etherpad-lite-client\");\n  //console.log(api1)\n  // alert(api1)\n  let etherpad = api1.connect({\n    apikey: \"308c704c36b41c846ba1713a59f92c6a9707ced910894de32070287a03bfcb68\",\n    host: \"localhost\",\n    port: 9001,\n    rejectUnauthorized: false//,\n    //sessionkey: \"7b52fbcb43a53ffe28c57280c259cdabcad1d5ade05ea23e8af0e43ae3d289ab\"\n  });\n  setEtherpad(etherpad)\n  \n  etherpad.createPad(\"tempPad\",[,\"hello\"], function (error, data1) { // author\n  if (error) console.log(\"Error creating author: \" + error.message);\n  else console.log(\"New pad created: \" + data1.authorID);\n  setPadID(data1.authorID);\n  })\n  //etherpad.setText(\"tempPad\", \"yes\" )\n    \n   // console.log(etherpad)\n    \n    etherpad.createAuthor([\"javon-test1\"], function (error, data1) { // author\n      if (error) console.log(\"Error creating author: \" + error.message);\n      else console.log(\"New author1 created: \" + data1.authorID);\n      setAuthorID(data1.authorID);\n      //alert(\"Author id1\" + data1.authorID);\n      \n      \n      etherpad.createGroup(function(error, data) {\n        if(error) console.error('Error creating group: ' + error.message)\n        else console.log('New group created: ' + data.groupID)\n         setGroupID(data.groupID)\n          var args = {\n          groupID: data.groupID,\n          padName: \"testpad\",\n          text: \"Hello world!\",\n        };\n       \n  \n        etherpad.createGroupPad(args, function (error, data2) {\n          if (error) console.error(\"Error creating pad: \" + error.message);\n          else console.log(\"New pad created: \" + data2.padID);\n  \n          if (data2.padID) setPadID(data2.padID);\n          //alert(data2.padID)\n           \n        })\n            \n            \n      \n          });\n        \n        })\n      }, []);\n      \n        useEffect(() => { \n         if(groupID !== undefined & authorID !== undefined ) {\n  console.log(groupID)\n  console.log(authorID)\n        \n      etherpad.createSession(authorID,groupID,          1312201246 ,\n        function(error, data) {\n  console.log(\"worked\")\n         });\n        } else {\n          console.log(\"tried\")\n        }\n    }, [groupID, authorID, padID]);\n      \n            // create session\n          etherpad.createSession(         data.groupID,            data1.authorID,            1312201246);\n           , function (error, data3) {\n  if (error) console.log(\"Error creating session: \" + error.message);\n  else console.log(\"New session created: \" + data3.sessionID);\n  setSessionID(data3.sessionID)\n  console.log(data3)\n  alert(data3.sessionID)\n  });*/\n\n  /*    etherpad.createAuthorIfNotExistsFor(8, [\"javon-test2\"], function (error, data1) {\n      if (error) console.log(\"Error creating author: \" + error.message);\n      else console.log(\"New author created: \" + data1.authorID);\n      setAuthorID(data1.authorID);\n      console.log(data1)\n      alert(\"Author id\" + data1.authorID);\n    })\n   //  Portal maps the internal userid to an etherpad group:\n  Request: http://pad.domain/api/1/createAuthorIfNotExistsFor?apikey=secret&name=Michael&authorMapper=7\n    \n    Response: {code: 0, message:\"ok\", data: {authorID: \"a.s8oes9dhwrvt0zif\"}}\n  \n    \n    Request: http://pad.domain/api/1/createGroupIfNotExistsFor?apikey=secret&groupMapper=7\n    \n    Response: {code: 0, message:\"ok\", data: {groupID: \"g.s8oes9dhwrvt0zif\"}}\n    \n    Portal creates a pad in the userGroup\n    \n    Request: http://pad.domain/api/1/createGroupPad?apikey=secret&groupID=g.s8oes9dhwrvt0zif&padName=samplePad&text=This is the first sentence in the pad\n    \n    Response: {code: 0, message:\"ok\", data: null}\n    \n    Portal starts the session for the user on the group:\n    \n    Request: http://pad.domain/api/1/createSession?apikey=secret&groupID=g.s8oes9dhwrvt0zif&authorID=a.s8oes9dhwrvt0zif&validUntil=1312201246\n    \n    Response: {\"data\":{\"sessionID\": \"s.s8oes9dhwrvt0zif\"}}\n    \n    Portal places the cookie \"sessionID\" with the given value on the client and creates an iframe including the pad.\n  */\n  //   etherpad.createPad('howdy', [\"yes\"])\n\n  /*     , function(error, data){\n         if (error) console.log(\"Error creating text: \" + error.message);\n         else console.log(\"New pad created: \" + data);\n         setSessionID('howdy')\n       })*/\n  //  etherpad.setText('howdy', 'hello')\n  //setSessionID('howdy')\n  //   console.log(etherpad.getText('howdy', [1]))\n  // etherpad.getHTML('howdy').then((e) => {\n  //   console.log(e)\n  // })\n\n  /*   etherpad.getHTML('howdy').then((e, d) => {\n      console.log(e)\n      console.log(d)\n    })*/\n\n  /*     \n       , function(error, data){\n         if (error) console.log(\"Error creating text: \" + error.message);\n         else console.log(\"New author created: \" + data);\n         setSessionID('howdy')\n         console.log(\"hehllo\")\n       })\n    */\n\n  /** \n  , function (error, d) {\n    if (error) console.log(\"Error creating author: \" + error.message);\n    else console.log(\"New text created: \" + d);\n    alert(\"text id\" + d)\n    console.log(d)\n  \n  })\n  \n  \n  etherpad.createAuthorIfNotExistsFor(8, [\"javon-test2\"], function (error, data1) {\n    if (error) console.log(\"Error creating author: \" + error.message);\n    else console.log(\"New author created: \" + data1.authorID);\n    setAuthorID(data1.authorID);\n    alert(\"Author id\" + data1.authorID);\n  })\n  etherpad.createAuthor([\"javon-test1\"], function (error, data1) {\n    if (error) console.log(\"Error creating author: \" + error.message);\n    else console.log(\"New author1 created: \" + data1.authorID);\n    setAuthorID(data1.authorID);\n    //alert(\"Author id1\" + data1.authorID);\n  })\n  \n  \n  etherpad.createAuthorIfNotExistsFor(7, [\"javon-test\"], function (error, data1) {\n      if (error) console.log(\"Error creating author: \" + error.message);\n      else console.log(\"New author created: \" + data1.authorID);\n      setAuthorID(data1.authorID);\n      alert(\"Author id\" + data1.authorID);\n  \n      etherpad.createGroupIfNotExistsFor(7, function (error, data) {\n        if (error) console.error(\"Error creating group: \" + error.message);\n        else console.log(\"New group created: \" + data.groupID);\n        setGroupID(data.groupID);\n        alert(\"Group pad\" + data.groupID);\n        // author\n        // createAuthorIfNotExistsFor;\n        var args = {\n          groupID: data.groupID,\n          padName: \"testpad\",\n          text: \"Hello world!\",\n        };\n        etherpad.createGroupPad(args, function (error, data2) {\n          if (error) console.error(\"Error creating pad: \" + error.message);\n          else console.log(\"New pad created: \" + data2.padID);\n  \n          if (data2.padID) setPadID(data2.padID);\n          alert(data2.padID)\n          etherpad.createSession(\n            data.groupID,\n            data1.authorID,\n            1312201246);\n           , function (error, data3) {\n  if (error) console.log(\"Error creating session: \" + error.message);\n  else console.log(\"New session created: \" + data3.sessionID);\n  setSessionID(data3.sessionID)\n  console.log(data3)\n  alert(data3.sessionID)\n  });\n        });\n      });\n    }\n  );\n  \n    etherpad.createPad(\"test1\", [\"hello\"],\n      function (error, data) {\n        if (error) console.error('Error creating pad: ' + error.message)\n        else console.log('New pad created: ' + data.padID)\n  \n        if(padID === undefined) {\n          setPadID(data.padID)\n        }\n  \n      })\n      {padID && (\n            <iframe\n              src={\n                \"http://localhost:9001/p/\" + \"tempPad\" +\n                \n                \"?showChat=false&showLineNumbers=false\"\n              }\n              width={600}\n              height={400}\n            ></iframe>\n          )}\n          <iframe\n            src={\n              \"http://localhost:9001/p/\" +\n              padID +\n              \"?showChat=false&showLineNumbers=false\"\n            }\n            width={600}\n            height={400}\n          ></iframe>\n            <iframe\n            src={\n              \"http://localhost:9001/p/\" +\n              sessionID +\n              \"?showChat=false&showLineNumbers=false\"\n            }\n            width={600}\n            height={400}\n          ></iframe>*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: groupID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: authorID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 16\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"VjVpCYdS8h2TiareJB+qF9pXj8k=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/JP/Documents/GitHub/etherpad-artense-client/src/App.js"],"names":["React","useEffect","useState","api","App","padID","setPadID","undefined","groupID","setGroupID","authorID","setAuthorID","sessionID","setSessionID","etherpad","setEtherpad","createAuthor","logo"],"mappings":";;;;AACA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB,C,CACA;AACA;AAEA;AACA;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAACK,SAAD,CAAlC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAACK,SAAD,CAAtC;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAACK,SAAD,CAAxC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAACK,SAAD,CAA1C;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAACK,SAAD,CAAxC,CALa,CAQb;AAIA;;AACAN,EAAAA,SAAS,CAAC,MAAM;AAElBE,IAAAA,GAAG,CAACa,YAAJ;AACG,GAHQ,CAAT;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAeE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;;AACF;AACA;AACA;AACA;AACA;AAEE;AACA;AAEA;AACA;AACA;AACA;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE;AAAK,QAAA,GAAG,EAAEC,IAAV;AAAgB,QAAA,SAAS,EAAC,UAA1B;AAAqC,QAAA,GAAG,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,cADF,eAEN;AAAA,kBAAIT;AAAJ;AAAA;AAAA;AAAA;AAAA,cAFM,eAGN;AAAA,kBAAIE;AAAJ;AAAA;AAAA;AAAA;AAAA,cAHM,eAKE;AAAA,yCACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADP;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAQE;AACE,QAAA,SAAS,EAAC,UADZ;AAEE,QAAA,IAAI,EAAC,qBAFP;AAGE,QAAA,MAAM,EAAC,QAHT;AAIE,QAAA,GAAG,EAAC,qBAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GA1SQN,G;;KAAAA,G;AA4ST,eAAeA,GAAf","sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport * as api from \"./api/server\"\n//const eejs = require('ep_etherpad-lite/node/eejs/');\n//const settings = require('ep_etherpad-lite/node/utils/Settings');\n\n//exports.eejsBlock_editbarMenuRight = function (hook_name, args, cb) {\n//  args.content = eejs.content=\"foo\"; return cb(); };\n\nfunction App() {\n  const [padID, setPadID] = useState(undefined);\n  const [groupID, setGroupID] = useState(undefined);\n  const [authorID, setAuthorID] = useState(undefined);\n  const [sessionID, setSessionID] = useState(undefined);\n  const [etherpad, setEtherpad] = useState(undefined)\n \n\n  //etherpad.createPad('howdy', [\"kekek\"])\n \n\n\n  // group\n  useEffect(() => {\n\napi.createAuthor()\n  })\n  /*  \n  let api1 = require(\"etherpad-lite-client\");\n  //console.log(api1)\n  // alert(api1)\n  let etherpad = api1.connect({\n    apikey: \"308c704c36b41c846ba1713a59f92c6a9707ced910894de32070287a03bfcb68\",\n    host: \"localhost\",\n    port: 9001,\n    rejectUnauthorized: false//,\n    //sessionkey: \"7b52fbcb43a53ffe28c57280c259cdabcad1d5ade05ea23e8af0e43ae3d289ab\"\n  });\nsetEtherpad(etherpad)\n  \n\netherpad.createPad(\"tempPad\",[,\"hello\"], function (error, data1) { // author\n  if (error) console.log(\"Error creating author: \" + error.message);\n  else console.log(\"New pad created: \" + data1.authorID);\n  setPadID(data1.authorID);\n})\n\n//etherpad.setText(\"tempPad\", \"yes\" )\n    \n   // console.log(etherpad)\n    \n    etherpad.createAuthor([\"javon-test1\"], function (error, data1) { // author\n      if (error) console.log(\"Error creating author: \" + error.message);\n      else console.log(\"New author1 created: \" + data1.authorID);\n      setAuthorID(data1.authorID);\n      //alert(\"Author id1\" + data1.authorID);\n      \n      \n      etherpad.createGroup(function(error, data) {\n        if(error) console.error('Error creating group: ' + error.message)\n        else console.log('New group created: ' + data.groupID)\n\n        setGroupID(data.groupID)\n\n\n        var args = {\n          groupID: data.groupID,\n          padName: \"testpad\",\n          text: \"Hello world!\",\n        };\n       \n  \n        etherpad.createGroupPad(args, function (error, data2) {\n          if (error) console.error(\"Error creating pad: \" + error.message);\n          else console.log(\"New pad created: \" + data2.padID);\n  \n          if (data2.padID) setPadID(data2.padID);\n          //alert(data2.padID)\n\n          \n        })\n            \n            \n      \n          });\n        \n\n\n      })\n      }, []);\n      \n\n\n      useEffect(() => { \n\n        if(groupID !== undefined & authorID !== undefined ) {\nconsole.log(groupID)\nconsole.log(authorID)\n        \n      etherpad.createSession(authorID,groupID,          1312201246 ,\n        function(error, data) {\nconsole.log(\"worked\")\n\n        });\n        } else {\n          console.log(\"tried\")\n        }\n    }, [groupID, authorID, padID]);\n      \n            // create session\n          etherpad.createSession(         data.groupID,            data1.authorID,            1312201246);\n           , function (error, data3) {\n  if (error) console.log(\"Error creating session: \" + error.message);\n  else console.log(\"New session created: \" + data3.sessionID);\n  setSessionID(data3.sessionID)\n  console.log(data3)\n  alert(data3.sessionID)\n  });*/\n\n\n  /*    etherpad.createAuthorIfNotExistsFor(8, [\"javon-test2\"], function (error, data1) {\n      if (error) console.log(\"Error creating author: \" + error.message);\n      else console.log(\"New author created: \" + data1.authorID);\n      setAuthorID(data1.authorID);\n      console.log(data1)\n      alert(\"Author id\" + data1.authorID);\n    })\n\n  //  Portal maps the internal userid to an etherpad group:\n  Request: http://pad.domain/api/1/createAuthorIfNotExistsFor?apikey=secret&name=Michael&authorMapper=7\n    \n    Response: {code: 0, message:\"ok\", data: {authorID: \"a.s8oes9dhwrvt0zif\"}}\n  \n    \n    Request: http://pad.domain/api/1/createGroupIfNotExistsFor?apikey=secret&groupMapper=7\n    \n    Response: {code: 0, message:\"ok\", data: {groupID: \"g.s8oes9dhwrvt0zif\"}}\n    \n    Portal creates a pad in the userGroup\n    \n    Request: http://pad.domain/api/1/createGroupPad?apikey=secret&groupID=g.s8oes9dhwrvt0zif&padName=samplePad&text=This is the first sentence in the pad\n    \n    Response: {code: 0, message:\"ok\", data: null}\n    \n    Portal starts the session for the user on the group:\n    \n    Request: http://pad.domain/api/1/createSession?apikey=secret&groupID=g.s8oes9dhwrvt0zif&authorID=a.s8oes9dhwrvt0zif&validUntil=1312201246\n    \n    Response: {\"data\":{\"sessionID\": \"s.s8oes9dhwrvt0zif\"}}\n    \n    Portal places the cookie \"sessionID\" with the given value on the client and creates an iframe including the pad.\n*/\n  //   etherpad.createPad('howdy', [\"yes\"])\n/*     , function(error, data){\n       if (error) console.log(\"Error creating text: \" + error.message);\n       else console.log(\"New pad created: \" + data);\n       setSessionID('howdy')\n     })*/\n \n  //  etherpad.setText('howdy', 'hello')\n  //setSessionID('howdy')\n\n  //   console.log(etherpad.getText('howdy', [1]))\n  // etherpad.getHTML('howdy').then((e) => {\n  //   console.log(e)\n  // })\n\n/*   etherpad.getHTML('howdy').then((e, d) => {\n    console.log(e)\n    console.log(d)\n  })*/\n  \n/*     \n     , function(error, data){\n       if (error) console.log(\"Error creating text: \" + error.message);\n       else console.log(\"New author created: \" + data);\n       setSessionID('howdy')\n       console.log(\"hehllo\")\n     })\n  */\n\n \n\n/** \n, function (error, d) {\n  if (error) console.log(\"Error creating author: \" + error.message);\n  else console.log(\"New text created: \" + d);\n  alert(\"text id\" + d)\n  console.log(d)\n\n})\n\n\netherpad.createAuthorIfNotExistsFor(8, [\"javon-test2\"], function (error, data1) {\n  if (error) console.log(\"Error creating author: \" + error.message);\n  else console.log(\"New author created: \" + data1.authorID);\n  setAuthorID(data1.authorID);\n  alert(\"Author id\" + data1.authorID);\n})\netherpad.createAuthor([\"javon-test1\"], function (error, data1) {\n  if (error) console.log(\"Error creating author: \" + error.message);\n  else console.log(\"New author1 created: \" + data1.authorID);\n  setAuthorID(data1.authorID);\n  //alert(\"Author id1\" + data1.authorID);\n})\n\n\netherpad.createAuthorIfNotExistsFor(7, [\"javon-test\"], function (error, data1) {\n    if (error) console.log(\"Error creating author: \" + error.message);\n    else console.log(\"New author created: \" + data1.authorID);\n    setAuthorID(data1.authorID);\n    alert(\"Author id\" + data1.authorID);\n\n    etherpad.createGroupIfNotExistsFor(7, function (error, data) {\n      if (error) console.error(\"Error creating group: \" + error.message);\n      else console.log(\"New group created: \" + data.groupID);\n      setGroupID(data.groupID);\n      alert(\"Group pad\" + data.groupID);\n      // author\n      // createAuthorIfNotExistsFor;\n      var args = {\n        groupID: data.groupID,\n        padName: \"testpad\",\n        text: \"Hello world!\",\n      };\n      etherpad.createGroupPad(args, function (error, data2) {\n        if (error) console.error(\"Error creating pad: \" + error.message);\n        else console.log(\"New pad created: \" + data2.padID);\n\n        if (data2.padID) setPadID(data2.padID);\n        alert(data2.padID)\n        etherpad.createSession(\n          data.groupID,\n          data1.authorID,\n          1312201246);\n         , function (error, data3) {\nif (error) console.log(\"Error creating session: \" + error.message);\nelse console.log(\"New session created: \" + data3.sessionID);\nsetSessionID(data3.sessionID)\nconsole.log(data3)\nalert(data3.sessionID)\n});\n      });\n    });\n  }\n);\n\n  etherpad.createPad(\"test1\", [\"hello\"],\n    function (error, data) {\n      if (error) console.error('Error creating pad: ' + error.message)\n      else console.log('New pad created: ' + data.padID)\n\n      if(padID === undefined) {\n        setPadID(data.padID)\n      }\n\n    })\n    {padID && (\n          <iframe\n            src={\n              \"http://localhost:9001/p/\" + \"tempPad\" +\n              \n              \"?showChat=false&showLineNumbers=false\"\n            }\n            width={600}\n            height={400}\n          ></iframe>\n        )}\n        <iframe\n          src={\n            \"http://localhost:9001/p/\" +\n            padID +\n            \"?showChat=false&showLineNumbers=false\"\n          }\n          width={600}\n          height={400}\n        ></iframe>\n          <iframe\n          src={\n            \"http://localhost:9001/p/\" +\n            sessionID +\n            \"?showChat=false&showLineNumbers=false\"\n          }\n          width={600}\n          height={400}\n        ></iframe>*/\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n<p>{groupID}</p>\n<p>{authorID}</p>\n        \n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}