{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\n(function () {\n  var _, http, https, querystring, retriever, url;\n\n  http = require('http');\n  https = require('https');\n  url = require('url');\n  querystring = require('querystring');\n  _ = require('underscore');\n  retriever = null;\n\n  exports.connect = function (options) {\n    var api, apiFunctions, base, base1, fn, functionName, i, len;\n\n    if (options == null) {\n      options = {};\n    }\n\n    if (!('apikey' in options)) {\n      throw new Error('You must specify etherpad-lite apikey');\n    }\n\n    api = {};\n    api.options = _.extend({}, options);\n    (base = api.options).host || (base.host = 'localhost');\n    (base1 = api.options).port || (base1.port = 9001);\n    retriever = http;\n\n    if (api.options.port === 443 || api.options.ssl) {\n      retriever = https;\n    }\n\n    api.call = function (functionName, functionArgs, callback) {\n      var apiOptions, chunks, httpOptions, req, rootPath;\n      rootPath = api.options.rootPath || '/api/1.2.12/';\n      apiOptions = _.extend({\n        'apikey': this.options.apikey\n      }, functionArgs);\n      httpOptions = _.extend(this.options, {\n        path: rootPath + functionName + '?' + querystring.stringify(apiOptions)\n      });\n      chunks = [];\n      req = retriever.get(httpOptions, function (res) {\n        res.on('data', function (data) {\n          return chunks.push(data);\n        });\n        return res.on('end', function () {\n          var error, error1, response;\n\n          try {\n            response = JSON.parse(chunks.join(''));\n          } catch (error1) {\n            error = error1;\n            callback({\n              code: -1,\n              message: 'cannot parse the API response'\n            }, null);\n            return;\n          }\n\n          if (response.code === 0 && response.message === 'ok') {\n            if (response.data) {\n              return callback(null, response.data);\n            } else {\n              return callback(null, response);\n            }\n          } else {\n            return callback({\n              code: response.code,\n              message: response.message\n            }, null);\n          }\n        });\n      });\n      return req.on('error', function (error) {\n        return callback({\n          code: -1,\n          message: error.message || error\n        }, null);\n      });\n    };\n\n    apiFunctions = ['createGroup', 'createGroupIfNotExistsFor', 'deleteGroup', 'listPads', 'listAllPads', 'createDiffHTML', 'createPad', 'createGroupPad', 'createAuthor', 'createAuthorIfNotExistsFor', 'listPadsOfAuthor', 'createSession', 'deleteSession', 'getSessionInfo', 'listSessionsOfGroup', 'listSessionsOfAuthor', 'getText', 'setText', 'getHTML', 'setHTML', 'getAttributePool', 'getRevisionsCount', 'getSavedRevisionsCount', 'listSavedRevisions', 'saveRevision', 'getRevisionChangeset', 'getLastEdited', 'deletePad', 'copyPad', 'movePad', 'getReadOnlyID', 'getPadID', 'setPublicStatus', 'getPublicStatus', 'setPassword', 'isPasswordProtected', 'listAuthorsOfPad', 'padUsersCount', 'getAuthorName', 'padUsers', 'sendClientsMessage', 'listAllGroups', 'checkToken', 'appendChatMessage', 'getChatHistory', 'getChatHistory', 'getChatHead', 'restoreRevision'];\n\n    fn = function (functionName) {\n      return api[functionName] = function (args, callback) {\n        if (arguments.length === 1 && _.isFunction(args)) {\n          callback = args;\n          args = {};\n        }\n\n        if (callback == null) {\n          callback = function () {};\n        }\n\n        api.call(functionName, args, callback);\n        return null;\n      };\n    };\n\n    for (i = 0, len = apiFunctions.length; i < len; i++) {\n      functionName = apiFunctions[i];\n      fn(functionName);\n    }\n\n    return api;\n  };\n}).call(this);","map":{"version":3,"sources":["C:/Users/JP/local_projects/etherpad/etherpad/node_modules/etherpad-lite-client/main.js"],"names":["_","http","https","querystring","retriever","url","require","exports","connect","options","api","apiFunctions","base","base1","fn","functionName","i","len","Error","extend","host","port","ssl","call","functionArgs","callback","apiOptions","chunks","httpOptions","req","rootPath","apikey","path","stringify","get","res","on","data","push","error","error1","response","JSON","parse","join","code","message","args","arguments","length","isFunction"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.10.0\n(function() {\n  var _, http, https, querystring, retriever, url;\n\n  http = require('http');\n\n  https = require('https');\n\n  url = require('url');\n\n  querystring = require('querystring');\n\n  _ = require('underscore');\n\n  retriever = null;\n\n  exports.connect = function(options) {\n    var api, apiFunctions, base, base1, fn, functionName, i, len;\n    if (options == null) {\n      options = {};\n    }\n    if (!('apikey' in options)) {\n      throw new Error('You must specify etherpad-lite apikey');\n    }\n    api = {};\n    api.options = _.extend({}, options);\n    (base = api.options).host || (base.host = 'localhost');\n    (base1 = api.options).port || (base1.port = 9001);\n    retriever = http;\n    if (api.options.port === 443 || api.options.ssl) {\n      retriever = https;\n    }\n    api.call = function(functionName, functionArgs, callback) {\n      var apiOptions, chunks, httpOptions, req, rootPath;\n      rootPath = api.options.rootPath || '/api/1.2.12/';\n      apiOptions = _.extend({\n        'apikey': this.options.apikey\n      }, functionArgs);\n      httpOptions = _.extend(this.options, {\n        path: rootPath + functionName + '?' + querystring.stringify(apiOptions)\n      });\n      chunks = [];\n      req = retriever.get(httpOptions, function(res) {\n        res.on('data', function(data) {\n          return chunks.push(data);\n        });\n        return res.on('end', function() {\n          var error, error1, response;\n          try {\n            response = JSON.parse(chunks.join(''));\n          } catch (error1) {\n            error = error1;\n            callback({\n              code: -1,\n              message: 'cannot parse the API response'\n            }, null);\n            return;\n          }\n          if (response.code === 0 && response.message === 'ok') {\n            if (response.data) {\n              return callback(null, response.data);\n            } else {\n              return callback(null, response);\n            }\n          } else {\n            return callback({\n              code: response.code,\n              message: response.message\n            }, null);\n          }\n        });\n      });\n      return req.on('error', function(error) {\n        return callback({\n          code: -1,\n          message: error.message || error\n        }, null);\n      });\n    };\n    apiFunctions = ['createGroup', 'createGroupIfNotExistsFor', 'deleteGroup', 'listPads', 'listAllPads', 'createDiffHTML', 'createPad', 'createGroupPad', 'createAuthor', 'createAuthorIfNotExistsFor', 'listPadsOfAuthor', 'createSession', 'deleteSession', 'getSessionInfo', 'listSessionsOfGroup', 'listSessionsOfAuthor', 'getText', 'setText', 'getHTML', 'setHTML', 'getAttributePool', 'getRevisionsCount', 'getSavedRevisionsCount', 'listSavedRevisions', 'saveRevision', 'getRevisionChangeset', 'getLastEdited', 'deletePad', 'copyPad', 'movePad', 'getReadOnlyID', 'getPadID', 'setPublicStatus', 'getPublicStatus', 'setPassword', 'isPasswordProtected', 'listAuthorsOfPad', 'padUsersCount', 'getAuthorName', 'padUsers', 'sendClientsMessage', 'listAllGroups', 'checkToken', 'appendChatMessage', 'getChatHistory', 'getChatHistory', 'getChatHead', 'restoreRevision'];\n    fn = function(functionName) {\n      return api[functionName] = function(args, callback) {\n        if (arguments.length === 1 && _.isFunction(args)) {\n          callback = args;\n          args = {};\n        }\n        if (callback == null) {\n          callback = (function() {});\n        }\n        api.call(functionName, args, callback);\n        return null;\n      };\n    };\n    for (i = 0, len = apiFunctions.length; i < len; i++) {\n      functionName = apiFunctions[i];\n      fn(functionName);\n    }\n    return api;\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}