{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JP\\\\Documents\\\\GitHub\\\\etherpad-artense-client\\\\src\\\\components\\\\UserPads\\\\UserPads.js\",\n    _s = $RefreshSig$();\n\nimport * as pad from \"../../etherpad/Pad\";\nimport * as author from \"../../etherpad/Author\";\nimport { useEffect } from \"react\";\nimport * as React from 'react';\nimport { Table } from '@material-ui/core';\nimport { TableBody } from '@material-ui/core';\nimport { TableCell } from '@material-ui/core';\nimport { TableContainer } from '@material-ui/core';\nimport { TableHead } from '@material-ui/core';\nimport { TableRow } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ViewPad } from \"./ViewPad\"; //import Paper from '@mui/material/Paper';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserPads = props => {\n  _s();\n\n  const [authorID, setAuthorID] = useState(props.authorID);\n  const [padNames, setPadNames] = useState([]);\n  useEffect(() => {\n    if (authorID) {\n      author.ListPadsOfAuthor(authorID).then(data => {\n        console.log(\"List author pads\");\n        console.log(data);\n        setPadNames(data);\n      }).catch(err => {\n        console.err(err);\n      });\n    } else {\n      pad.ListAllPads().then(data => {\n        console.log(\"List all pads\");\n        console.log(data);\n        setPadNames(data);\n      }).catch(err => {\n        console.err(err);\n      });\n    }\n  }, [authorID]); //  \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        sx: {\n          minWidth: 650\n        },\n        \"aria-label\": \"simple table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Dessert (100g serving)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Calories\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Fat\\xA0(g)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Carbs\\xA0(g)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Protein\\xA0(g)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: padNames === null || padNames === void 0 ? void 0 : padNames.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n            sx: {\n              '&:last-child td, &:last-child th': {\n                border: 0\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/pad\",\n                component: ViewPad,\n                children: row\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, this)\n          }, row, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserPads, \"G/FbscKkJ0V7gTvN9olvCriHmnk=\");\n\n_c = UserPads;\nexport default UserPads;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPads\");","map":{"version":3,"sources":["C:/Users/JP/Documents/GitHub/etherpad-artense-client/src/components/UserPads/UserPads.js"],"names":["pad","author","useEffect","React","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","useState","Link","ViewPad","UserPads","props","authorID","setAuthorID","padNames","setPadNames","ListPadsOfAuthor","then","data","console","log","catch","err","ListAllPads","minWidth","map","row","border"],"mappings":"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","sourcesContent":["import * as pad from \"../../etherpad/Pad\"\r\nimport * as author from \"../../etherpad/Author\"\r\nimport { useEffect } from \"react\"\r\nimport * as React from 'react';\r\nimport {Table} from '@material-ui/core';\r\nimport {TableBody} from '@material-ui/core';\r\nimport {TableCell} from '@material-ui/core';\r\nimport {TableContainer} from '@material-ui/core';\r\nimport {TableHead} from '@material-ui/core';\r\nimport {TableRow} from '@material-ui/core';\r\nimport {Paper} from '@material-ui/core'\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {ViewPad} from \"./ViewPad\"\r\n//import Paper from '@mui/material/Paper';\r\n\r\nconst UserPads = (props) => {\r\n    const [authorID, setAuthorID] = useState(props.authorID)\r\n    const [padNames, setPadNames] = useState([])\r\n    \r\nuseEffect(() => {\r\n\r\n    if(authorID) {\r\n        author.ListPadsOfAuthor(authorID).then((data) => {\r\n            console.log(\"List author pads\")\r\n            console.log(data)\r\n            setPadNames(data)           \r\n        }).catch((err) => {\r\n            console.err(err)\r\n        })\r\n    } else {\r\n        pad.ListAllPads().then((data) => {\r\n            console.log(\"List all pads\")\r\n            console.log(data)\r\n            setPadNames(data)\r\n        }).catch((err) => {\r\n            console.err(err)\r\n        })\r\n    }\r\n}, [authorID])\r\n\r\n//  \r\n return(<div>\r\n\r\n<TableContainer component={Paper}>  \r\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Dessert (100g serving)</TableCell>\r\n              <TableCell align=\"right\">Calories</TableCell>\r\n              <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\r\n              <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\r\n              <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            \r\n            {padNames?.map((row) => (\r\n              <TableRow\r\n                key={row}\r\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\r\n                <TableCell align=\"right\">\r\n                    <Link to={\"/pad\"} component={ViewPad}>{row}</Link></TableCell>       \r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n </div>)   \r\n    \r\n}\r\n\r\n\r\nexport default UserPads"]},"metadata":{},"sourceType":"module"}