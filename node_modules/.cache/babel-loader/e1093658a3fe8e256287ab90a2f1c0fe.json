{"ast":null,"code":"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\"; //const eejs = require('ep_etherpad-lite/node/eejs/');\n//const settings = require('ep_etherpad-lite/node/utils/Settings');\n//exports.eejsBlock_editbarMenuRight = function (hook_name, args, cb) {\n//  args.content = eejs.content=\"foo\"; return cb(); };\n\nlet apiKey = \"308c704c36b41c846ba1713a59f92c6a9707ced910894de32070287a03bfcb68\";\nlet apiVersion = \"1.2.14\";\nlet site = \"localhost\";\nlet connectionType = \"http\";\nlet port = \":9001\"; // don't forget colon\n\nlet createAuthor_endpoint = 'createAuthor';\nlet createSession_endpoint = 'createSession';\nlet createGroup_endpoint = 'createGroup';\nlet validUntil_endpoint = 2312905480;\nlet createGroupPadID_endpoint = 'createGroupPad';\nlet createPadID_endpoint = 'createPad';\nlet defaultText = \"\";\nlet testPadName = \"testCreatePad\";\nlet testText = \"this is the first sentence - testing\";\nlet clientLocation = \"http://localhost:9001/p/\";\n\nconst endPoint = point => `${connectionType}://${site}${port}/api/${apiVersion}/${point}?apikey=${apiKey}`;\n\nexport const testPad = async () => {\n  console.log(\"Attempting to test pad\");\n  let authorID = await axios.get(endPoint(createAuthor_endpoint)).then(res => {\n    console.log(\"Author Created: \" + res.data.data.authorID);\n    return res.data.data.authorID;\n  });\n  console.log(authorID); // let groupPadEndPoint_endpoint = `${endPoint(createGroupPadID_endpoint)}` + `&groupID=${groupID}` + `&padName=${\"testPadName\"}` +\n  // `&text=${testText}`\n\n  let padEndPoint_endpoint = `${endPoint(createPadID_endpoint)}` + `&padID=testCreatePad` + `&text=${testText}`;\n  let groupPadID = await axios.get(padEndPoint_endpoint).then(res => {\n    console.log(res);\n\n    if (res.data.data === null) {\n      return \"testCreatePad\";\n    }\n\n    console.log(\"Pad Created: \" + res.data.data.padID);\n    return res.data.data.padID;\n  });\n  let padLocation = `${clientLocation}${groupPadID}`; // + translateEtherpadOptions(etherpadOptions)\n\n  return {\n    \"authorID\": authorID,\n    \"groupPadID\": groupPadID,\n    \"clientLocation\": clientLocation,\n    \"padLocation\": padLocation\n  };\n};\nexport const testPad_setText = async () => {\n  let padEndPoint_endpoint = `${endPoint(\"setText\")}` + `&padID=${testPadName}` + `&text=I Just Set the text`;\n  await axios.get(padEndPoint_endpoint).then(res => {\n    console.log(res);\n    console.log(\"Pad text set: \"); // return res.data.data.padID\n  });\n};\nexport const testPad_getHTML = async () => {\n  let padEndPoint_endpoint = `${endPoint(\"getHTML\")}` + `&padID=${testPadName}`;\n  return await axios.get(padEndPoint_endpoint).then(res => {\n    console.log(res);\n    console.log(\"Pad text set: \"); // return res.data.data.padID\n\n    return html;\n  });\n};\nexport const testPad_1 = async () => {\n  console.log(\"Attempting to test pad\");\n  console.log(endPoint(createAuthor_endpoint));\n  let authorID = await axios.get(endPoint(createAuthor_endpoint)).then(res => {\n    console.log(\"Author Created: \" + res.data.data.authorID);\n    return res.data.data.authorID;\n  });\n  console.log(authorID);\n  let groupID = await axios.get(endPoint(createGroup_endpoint)).then(res => {\n    console.log(\"Group Created\" + res.data.data.groupID);\n    return res.data.data.groupID;\n  });\n  let sessionEndPoint = `${endPoint(createSession_endpoint)}` + `&authorID=${authorID}` + `&groupID=${groupID}` + `&validUntil=${validUntil_endpoint}`;\n  let sessionID = await axios.get(sessionEndPoint).then(res => {\n    console.log(res);\n    console.log(\"Session Created: \" + res.data.data.sessionID);\n    return res.data.data.sessionID;\n  });\n  let groupPadEndPoint_endpoint = `${endPoint(createGroupPadID_endpoint)}` + `&groupID=${groupID}` + `&padName=${\"testPadName\"}` + `&text=${testText}`;\n  let groupPadID = await axios.get(groupPadEndPoint_endpoint).then(res => {\n    console.log(res);\n    console.log(\"Group Pad Created: \" + res.data.data.padID);\n    return res.data.data.padID;\n  });\n  let padLocation = `${clientLocation}${groupPadID}`; // + translateEtherpadOptions(etherpadOptions)\n\n  return {\n    \"authorID\": authorID,\n    \"sessionID\": sessionID,\n    \"groupID\": groupID,\n    \"groupPadID\": groupPadID,\n    \"clientLocation\": clientLocation,\n    \"padLocation\": padLocation\n  };\n};\nexport const createGroupPad = async (groupID, etherpadOptions) => {\n  console.log(\"Attempting to create Pad\");\n\n  const translateEtherpadOptions = etherpadOptions => {\n    return \"?showChat=false&showLineNumbers=false\";\n  };\n\n  let authorID = await axios.get(endPoint(createAuthor_endpoint)).then(res => {\n    console.log(\"Author Created: \" + res.data.data.authorID);\n    return res.data.data.authorID;\n  });\n  groupID = await axios.get(endPoint(createGroup_endpoint)).then(res => {\n    console.log(\"Group Created\" + res.data.data.groupID);\n    return res.data.data.groupID;\n  });\n  let sessionEndPoint = `${endPoint(createSession_endpoint)}` + `&authorID=${authorID}` + `&groupID=${groupID}` + `&validUntil=${validUntil_endpoint}`;\n  let sessionID = await axios.get(sessionEndPoint).then(res => {\n    console.log(res);\n    console.log(\"Session Created: \" + res.data.data.sessionID);\n    return res.data.data.sessionID;\n  });\n  let groupPadEndPoint_endpoint = `${endPoint(createGroupPadID_endpoint)}` + `&groupID=${groupID}` + `&padName=${\"testPadName\"}` + `&text=${defaultText}`;\n  let groupPadID = await axios.get(groupPadEndPoint_endpoint).then(res => {\n    console.log(res);\n    console.log(\"Group Pad Created: \" + res.data.data.padID);\n    return res.data.data.padID;\n  });\n  let padLocation = `${clientLocation}${groupPadID}` + translateEtherpadOptions(etherpadOptions);\n  return {\n    \"authorID\": authorID,\n    \"sessionID\": sessionID,\n    \"groupID\": groupID,\n    \"groupPadID\": groupPadID,\n    \"clientLocation\": clientLocation,\n    \"padLocation\": padLocation\n  };\n};","map":{"version":3,"sources":["C:/Users/JP/Documents/GitHub/etherpad-artense-client/src/api/server.js"],"names":["axios","React","useEffect","useState","apiKey","apiVersion","site","connectionType","port","createAuthor_endpoint","createSession_endpoint","createGroup_endpoint","validUntil_endpoint","createGroupPadID_endpoint","createPadID_endpoint","defaultText","testPadName","testText","clientLocation","endPoint","point","testPad","console","log","authorID","get","then","res","data","padEndPoint_endpoint","groupPadID","padID","padLocation","testPad_setText","testPad_getHTML","html","testPad_1","groupID","sessionEndPoint","sessionID","groupPadEndPoint_endpoint","createGroupPad","etherpadOptions","translateEtherpadOptions"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;AACA;AAEA;AACA;;AACA,IAAIC,MAAM,GAAG,kEAAb;AACA,IAAIC,UAAU,GAAG,QAAjB;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,cAAc,GAAG,MAArB;AACA,IAAIC,IAAI,GAAG,OAAX,C,CAAmB;;AACnB,IAAIC,qBAAqB,GAAG,cAA5B;AACA,IAAIC,sBAAsB,GAAG,eAA7B;AACA,IAAIC,oBAAoB,GAAG,aAA3B;AACA,IAAIC,mBAAmB,GAAG,UAA1B;AACA,IAAIC,yBAAyB,GAAG,gBAAhC;AACA,IAAIC,oBAAoB,GAAG,WAA3B;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,WAAW,GAAG,eAAlB;AACA,IAAIC,QAAQ,GAAG,sCAAf;AACA,IAAIC,cAAc,GAAG,0BAArB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAY,GAAEb,cAAe,MAAKD,IAAK,GAAEE,IAAK,QAAOH,UAAW,IAAGe,KAAM,WAAUhB,MAAO,EAA3G;;AAEA,OAAO,MAAMiB,OAAO,GAAG,YAAY;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,MAAIC,QAAQ,GAAG,MAAMxB,KAAK,CAACyB,GAAN,CAAUN,QAAQ,CAACV,qBAAD,CAAlB,EAA2CiB,IAA3C,CAAiDC,GAAD,IAAS;AAC1EL,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBI,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcJ,QAA/C;AACA,WAAOG,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcJ,QAArB;AACH,GAHoB,CAArB;AAIAF,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,EAN+B,CAShC;AACA;;AAIC,MAAIK,oBAAoB,GAAI,GAAEV,QAAQ,CAACL,oBAAD,CAAuB,EAAlC,GAAuC,sBAAvC,GAAgE,SAAQG,QAAS,EAA5G;AAEA,MAAIa,UAAU,GAAG,MAAM9B,KAAK,CAACyB,GAAN,CAAUI,oBAAV,EAAgCH,IAAhC,CAAsCC,GAAD,IAAS;AACjEL,IAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;;AACA,QAAGA,GAAG,CAACC,IAAJ,CAASA,IAAT,KAAkB,IAArB,EAA2B;AACvB,aAAO,eAAP;AACH;;AACDN,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBI,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcG,KAA5C;AACA,WAAOJ,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcG,KAArB;AACH,GAPsB,CAAvB;AASA,MAAIC,WAAW,GAAI,GAAEd,cAAe,GAAEY,UAAW,EAAjD,CAzB+B,CAyBmB;;AAElD,SAAO;AAAE,gBAAYN,QAAd;AAEX,kBAAcM,UAFH;AAGX,sBAAkBZ,cAHP;AAIX,mBAAec;AAJJ,GAAP;AAKH,CAhCM;AAkCP,OAAO,MAAMC,eAAe,GAAG,YAAY;AAEvC,MAAIJ,oBAAoB,GAAI,GAAEV,QAAQ,CAAC,SAAD,CAAY,EAAvB,GAA4B,UAASH,WAAY,EAAjD,GAAsD,2BAAjF;AAEH,QAAMhB,KAAK,CAACyB,GAAN,CAAUI,oBAAV,EAAgCH,IAAhC,CAAsCC,GAAD,IAAS;AAC7CL,IAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AAEAL,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAH6C,CAI9C;AACF,GALE,CAAN;AAOA,CAXM;AAcP,OAAO,MAAMW,eAAe,GAAG,YAAY;AAC3C,MAAIL,oBAAoB,GAAI,GAAEV,QAAQ,CAAC,SAAD,CAAY,EAAvB,GAA4B,UAASH,WAAY,EAA5E;AAEA,SAAO,MAAMhB,KAAK,CAACyB,GAAN,CAAUI,oBAAV,EAAgCH,IAAhC,CAAsCC,GAAD,IAAS;AACnDL,IAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AAEAL,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAHmD,CAIpD;;AACA,WAAOY,IAAP;AACF,GANQ,CAAb;AAOC,CAVM;AAcP,OAAO,MAAMC,SAAS,GAAG,YAAY;AACjCd,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACV,qBAAD,CAApB;AACA,MAAIe,QAAQ,GAAG,MAAMxB,KAAK,CAACyB,GAAN,CAAUN,QAAQ,CAACV,qBAAD,CAAlB,EAA2CiB,IAA3C,CAAiDC,GAAD,IAAS;AAC1EL,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBI,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcJ,QAA/C;AACA,WAAOG,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcJ,QAArB;AACH,GAHoB,CAArB;AAIAF,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACA,MAAIa,OAAO,GAAG,MAAMrC,KAAK,CAACyB,GAAN,CAAUN,QAAQ,CAACR,oBAAD,CAAlB,EAA0Ce,IAA1C,CAAgDC,GAAD,IAAS;AACxEL,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBI,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcS,OAA5C;AACA,WAAOV,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcS,OAArB;AACH,GAHmB,CAApB;AAKA,MAAIC,eAAe,GAAI,GAAEnB,QAAQ,CAACT,sBAAD,CAAyB,EAApC,GAAyC,aAAYc,QAAS,EAA9D,GAAmE,YAAWa,OAAQ,EAAtF,GACrB,eAAczB,mBAAoB,EADnC;AAGA,MAAI2B,SAAS,GAAG,MAAMvC,KAAK,CAACyB,GAAN,CAAUa,eAAV,EAA2BZ,IAA3B,CAAiCC,GAAD,IAAS;AAC3DL,IAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBI,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcW,SAAhD;AACA,WAAOZ,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcW,SAArB;AACH,GAJqB,CAAtB;AAMA,MAAIC,yBAAyB,GAAI,GAAErB,QAAQ,CAACN,yBAAD,CAA4B,EAAvC,GAA4C,YAAWwB,OAAQ,EAA/D,GAAoE,YAAW,aAAc,EAA7F,GAC/B,SAAQpB,QAAS,EADlB;AAGA,MAAIa,UAAU,GAAG,MAAM9B,KAAK,CAACyB,GAAN,CAAUe,yBAAV,EAAqCd,IAArC,CAA2CC,GAAD,IAAS;AACtEL,IAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBI,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcG,KAAlD;AACA,WAAOJ,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcG,KAArB;AACH,GAJsB,CAAvB;AAMA,MAAIC,WAAW,GAAI,GAAEd,cAAe,GAAEY,UAAW,EAAjD,CA/BiC,CA+BiB;;AAElD,SAAO;AAAE,gBAAYN,QAAd;AACP,iBAAae,SADN;AAEP,eAAWF,OAFJ;AAGX,kBAAcP,UAHH;AAIX,sBAAkBZ,cAJP;AAKX,mBAAec;AALJ,GAAP;AAMH,CAvCM;AAyCP,OAAO,MAAMS,cAAc,GAAG,OAAOJ,OAAP,EAAgBK,eAAhB,KAAoC;AAC9DpB,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;;AAEA,QAAMoB,wBAAwB,GAAID,eAAD,IAAqB;AAClD,WAAO,uCAAP;AACD,GAFH;;AAIA,MAAIlB,QAAQ,GAAG,MAAMxB,KAAK,CAACyB,GAAN,CAAUN,QAAQ,CAACV,qBAAD,CAAlB,EAA2CiB,IAA3C,CAAiDC,GAAD,IAAS;AAC1EL,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBI,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcJ,QAA/C;AACA,WAAOG,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcJ,QAArB;AACH,GAHoB,CAArB;AAIAa,EAAAA,OAAO,GAAG,MAAMrC,KAAK,CAACyB,GAAN,CAAUN,QAAQ,CAACR,oBAAD,CAAlB,EAA0Ce,IAA1C,CAAgDC,GAAD,IAAS;AACpEL,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBI,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcS,OAA5C;AACA,WAAOV,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcS,OAArB;AACH,GAHe,CAAhB;AAMA,MAAIC,eAAe,GAAI,GAAEnB,QAAQ,CAACT,sBAAD,CAAyB,EAApC,GAAyC,aAAYc,QAAS,EAA9D,GAAmE,YAAWa,OAAQ,EAAtF,GACrB,eAAczB,mBAAoB,EADnC;AAGA,MAAI2B,SAAS,GAAG,MAAMvC,KAAK,CAACyB,GAAN,CAAUa,eAAV,EAA2BZ,IAA3B,CAAiCC,GAAD,IAAS;AAC3DL,IAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBI,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcW,SAAhD;AACA,WAAOZ,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcW,SAArB;AACH,GAJqB,CAAtB;AAMA,MAAIC,yBAAyB,GAAI,GAAErB,QAAQ,CAACN,yBAAD,CAA4B,EAAvC,GAA4C,YAAWwB,OAAQ,EAA/D,GAAoE,YAAW,aAAc,EAA7F,GAC/B,SAAQtB,WAAY,EADrB;AAGA,MAAIe,UAAU,GAAG,MAAM9B,KAAK,CAACyB,GAAN,CAAUe,yBAAV,EAAqCd,IAArC,CAA2CC,GAAD,IAAS;AACtEL,IAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBI,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcG,KAAlD;AACA,WAAOJ,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcG,KAArB;AACH,GAJsB,CAAvB;AAMA,MAAIC,WAAW,GAAI,GAAEd,cAAe,GAAEY,UAAW,EAA/B,GAAmCa,wBAAwB,CAACD,eAAD,CAA7E;AAEA,SAAO;AAAE,gBAAYlB,QAAd;AACP,iBAAae,SADN;AAEP,eAAWF,OAFJ;AAGX,kBAAcP,UAHH;AAIX,sBAAkBZ,cAJP;AAKX,mBAAec;AALJ,GAAP;AAMH,CA3CM","sourcesContent":["import axios from \"axios\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n//const eejs = require('ep_etherpad-lite/node/eejs/');\r\n//const settings = require('ep_etherpad-lite/node/utils/Settings');\r\n\r\n//exports.eejsBlock_editbarMenuRight = function (hook_name, args, cb) {\r\n//  args.content = eejs.content=\"foo\"; return cb(); };\r\nlet apiKey = \"308c704c36b41c846ba1713a59f92c6a9707ced910894de32070287a03bfcb68\"\r\nlet apiVersion = \"1.2.14\"\r\nlet site = \"localhost\"\r\nlet connectionType = \"http\"\r\nlet port = \":9001\" // don't forget colon\r\nlet createAuthor_endpoint = 'createAuthor'\r\nlet createSession_endpoint = 'createSession'\r\nlet createGroup_endpoint = 'createGroup'\r\nlet validUntil_endpoint = 2312905480;\r\nlet createGroupPadID_endpoint = 'createGroupPad'\r\nlet createPadID_endpoint = 'createPad'\r\nlet defaultText = \"\";\r\nlet testPadName = \"testCreatePad\"\r\nlet testText = \"this is the first sentence - testing\"\r\nlet clientLocation = \"http://localhost:9001/p/\"\r\n\r\nconst endPoint = (point) => `${connectionType}://${site}${port}/api/${apiVersion}/${point}?apikey=${apiKey}`;\r\n\r\nexport const testPad = async () => {\r\n    console.log(\"Attempting to test pad\")\r\n    let authorID = await axios.get(endPoint(createAuthor_endpoint)).then((res) => {\r\n        console.log(\"Author Created: \" + res.data.data.authorID)\r\n        return res.data.data.authorID\r\n    })\r\n    console.log(authorID)\r\n    \r\n    \r\n   // let groupPadEndPoint_endpoint = `${endPoint(createGroupPadID_endpoint)}` + `&groupID=${groupID}` + `&padName=${\"testPadName\"}` +\r\n   // `&text=${testText}`\r\n    \r\n\r\n\r\n    let padEndPoint_endpoint = `${endPoint(createPadID_endpoint)}` + `&padID=testCreatePad` + `&text=${testText}`\r\n\r\n    let groupPadID = await axios.get(padEndPoint_endpoint).then((res) => {\r\n        console.log(res)\r\n        if(res.data.data === null) {\r\n            return \"testCreatePad\"\r\n        }\r\n        console.log(\"Pad Created: \" + res.data.data.padID)\r\n        return res.data.data.padID\r\n    })\r\n\r\n    let padLocation = `${clientLocation}${groupPadID}`// + translateEtherpadOptions(etherpadOptions)\r\n\r\n    return { \"authorID\": authorID,\r\n    \r\n\"groupPadID\": groupPadID,\r\n\"clientLocation\": clientLocation,\r\n\"padLocation\": padLocation}\r\n}\r\n\r\nexport const testPad_setText = async () => {\r\n\r\n    let padEndPoint_endpoint = `${endPoint(\"setText\")}` + `&padID=${testPadName}` + `&text=I Just Set the text`\r\n\r\n await axios.get(padEndPoint_endpoint).then((res) => {\r\n        console.log(res)\r\n       \r\n        console.log(\"Pad text set: \")\r\n       // return res.data.data.padID\r\n    })\r\n\r\n}\r\n\r\n\r\nexport const testPad_getHTML = async () => {\r\nlet padEndPoint_endpoint = `${endPoint(\"getHTML\")}` + `&padID=${testPadName}` \r\n\r\nreturn await axios.get(padEndPoint_endpoint).then((res) => {\r\n        console.log(res)\r\n       \r\n        console.log(\"Pad text set: \")\r\n       // return res.data.data.padID\r\n       return html\r\n    })\r\n}\r\n\r\n\r\n\r\nexport const testPad_1 = async () => {\r\n    console.log(\"Attempting to test pad\")\r\n    console.log(endPoint(createAuthor_endpoint))\r\n    let authorID = await axios.get(endPoint(createAuthor_endpoint)).then((res) => {\r\n        console.log(\"Author Created: \" + res.data.data.authorID)\r\n        return res.data.data.authorID\r\n    })\r\n    console.log(authorID)\r\n    let groupID = await axios.get(endPoint(createGroup_endpoint)).then((res) => {\r\n        console.log(\"Group Created\" + res.data.data.groupID)\r\n        return res.data.data.groupID\r\n    })\r\n    \r\n    let sessionEndPoint = `${endPoint(createSession_endpoint)}` + `&authorID=${authorID}` + `&groupID=${groupID}` +\r\n    `&validUntil=${validUntil_endpoint}`\r\n\r\n    let sessionID = await axios.get(sessionEndPoint).then((res) => {\r\n        console.log(res)\r\n        console.log(\"Session Created: \" + res.data.data.sessionID)\r\n        return res.data.data.sessionID\r\n    })\r\n\r\n    let groupPadEndPoint_endpoint = `${endPoint(createGroupPadID_endpoint)}` + `&groupID=${groupID}` + `&padName=${\"testPadName\"}` +\r\n    `&text=${testText}`\r\n\r\n    let groupPadID = await axios.get(groupPadEndPoint_endpoint).then((res) => {\r\n        console.log(res)\r\n        console.log(\"Group Pad Created: \" + res.data.data.padID)\r\n        return res.data.data.padID\r\n    })\r\n\r\n    let padLocation = `${clientLocation}${groupPadID}`// + translateEtherpadOptions(etherpadOptions)\r\n\r\n    return { \"authorID\": authorID,\r\n    \"sessionID\": sessionID,\r\n    \"groupID\": groupID,\r\n\"groupPadID\": groupPadID,\r\n\"clientLocation\": clientLocation,\r\n\"padLocation\": padLocation}\r\n}\r\n\r\nexport const createGroupPad = async (groupID, etherpadOptions) => {\r\n    console.log(\"Attempting to create Pad\")\r\n\r\n    const translateEtherpadOptions = (etherpadOptions) => {\r\n        return \"?showChat=false&showLineNumbers=false\"\r\n      }\r\n\r\n    let authorID = await axios.get(endPoint(createAuthor_endpoint)).then((res) => {\r\n        console.log(\"Author Created: \" + res.data.data.authorID)\r\n        return res.data.data.authorID\r\n    })\r\n    groupID = await axios.get(endPoint(createGroup_endpoint)).then((res) => {\r\n        console.log(\"Group Created\" + res.data.data.groupID)\r\n        return res.data.data.groupID\r\n    })\r\n\r\n    \r\n    let sessionEndPoint = `${endPoint(createSession_endpoint)}` + `&authorID=${authorID}` + `&groupID=${groupID}` +\r\n    `&validUntil=${validUntil_endpoint}`\r\n\r\n    let sessionID = await axios.get(sessionEndPoint).then((res) => {\r\n        console.log(res)\r\n        console.log(\"Session Created: \" + res.data.data.sessionID)\r\n        return res.data.data.sessionID\r\n    })\r\n\r\n    let groupPadEndPoint_endpoint = `${endPoint(createGroupPadID_endpoint)}` + `&groupID=${groupID}` + `&padName=${\"testPadName\"}` +\r\n    `&text=${defaultText}`\r\n\r\n    let groupPadID = await axios.get(groupPadEndPoint_endpoint).then((res) => {\r\n        console.log(res)\r\n        console.log(\"Group Pad Created: \" + res.data.data.padID)\r\n        return res.data.data.padID\r\n    })\r\n\r\n    let padLocation = `${clientLocation}${groupPadID}` + translateEtherpadOptions(etherpadOptions)\r\n\r\n    return { \"authorID\": authorID,\r\n    \"sessionID\": sessionID,\r\n    \"groupID\": groupID,\r\n\"groupPadID\": groupPadID,\r\n\"clientLocation\": clientLocation,\r\n\"padLocation\": padLocation}\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}