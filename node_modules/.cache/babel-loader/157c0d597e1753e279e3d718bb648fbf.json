{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JP\\\\Documents\\\\GitHub\\\\etherpad-artense-client\\\\src\\\\components\\\\UserPads\\\\UserPads.js\",\n    _s = $RefreshSig$();\n\nimport * as pad from \"../../etherpad/Pad\";\nimport * as author from \"../../etherpad/Author\";\nimport { useEffect } from \"react\";\nimport * as React from 'react';\nimport { Table } from '@material-ui/core';\nimport { TableBody } from '@material-ui/core';\nimport { TableCell } from '@material-ui/core';\nimport { TableContainer } from '@material-ui/core';\nimport { TableHead } from '@material-ui/core';\nimport { TableRow } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ViewPad } from \"./ViewPad\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport react from \"react\"; //import Paper from '@mui/material/Paper';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserPads = props => {\n  _s();\n\n  const [authorID, setAuthorID] = useState(props.authorID);\n  const [padNames, setPadNames] = useState(Array());\n  const [padID, setPadID] = useState(undefined);\n  const history = useHistory();\n  const params = useParams();\n  useEffect(() => {\n    if (authorID) {\n      author.ListPadsOfAuthor(authorID).then(data => {\n        console.log(\"List author pads\");\n        console.log(data);\n        setPadNames(data);\n      }).catch(err => {\n        console.error(err);\n      });\n    } else {\n      pad.ListAllPads().then(data => {\n        var _data$data, _data$data2, _data$data2$data, _data$data2$data$data, _data$data3, _data$data3$data, _data$data3$data$data;\n\n        console.log(\"List all pads\");\n        console.log(data);\n        console.log(data === null || data === void 0 ? void 0 : data.data);\n        console.log(data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.data);\n        console.log(data === null || data === void 0 ? void 0 : (_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : (_data$data2$data = _data$data2.data) === null || _data$data2$data === void 0 ? void 0 : (_data$data2$data$data = _data$data2$data.data) === null || _data$data2$data$data === void 0 ? void 0 : _data$data2$data$data.padIDs);\n        setPadNames(data === null || data === void 0 ? void 0 : (_data$data3 = data.data) === null || _data$data3 === void 0 ? void 0 : (_data$data3$data = _data$data3.data) === null || _data$data3$data === void 0 ? void 0 : (_data$data3$data$data = _data$data3$data.data) === null || _data$data3$data$data === void 0 ? void 0 : _data$data3$data$data.padIDs);\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }, [authorID, padID]); //<TableContainer component={Paper}>  \n  //  component={ViewPad} to={`/pad`}\n\n  function showViewPad(padID) {\n    // I need to change the text\n    pad.ListAllPads().then(data => {\n      var _data$data4, _data$data5, _data$data5$data, _data$data5$data$data;\n\n      console.log(\"List all pads\");\n      console.log(data);\n      console.log(data === null || data === void 0 ? void 0 : data.data);\n      console.log(data === null || data === void 0 ? void 0 : (_data$data4 = data.data) === null || _data$data4 === void 0 ? void 0 : _data$data4.data);\n      console.log(data === null || data === void 0 ? void 0 : (_data$data5 = data.data) === null || _data$data5 === void 0 ? void 0 : (_data$data5$data = _data$data5.data) === null || _data$data5$data === void 0 ? void 0 : (_data$data5$data$data = _data$data5$data.data) === null || _data$data5$data$data === void 0 ? void 0 : _data$data5$data$data.padIDs);\n      setPadID(padID); // setPadNames(data?.data?.data?.data?.padIDs)\n    }).catch(err => {\n      console.error(err);\n    }); // history.push(\"/viewPad\")\n  }\n\n  useEffect(() => {\n    if (!padID) return;\n  }, [padID]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: async () => {\n        const data = await pad.createPad(\"1212\", \"two\");\n        console.log(data);\n        setPadID(data === null || data === void 0 ? void 0 : data.padID);\n      },\n      children: \"Create Pad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      sx: {\n        minWidth: 650\n      },\n      \"aria-label\": \"simple table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Dessert (100g serving)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: padNames === null || padNames === void 0 ? void 0 : padNames.slice(-5).map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n          sx: {\n            '&:last-child td, &:last-child th': {\n              border: 0\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"right\",\n            onClick: () => {\n              showViewPad(row);\n            },\n            children: row\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this)\n        }, row, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), padID && /*#__PURE__*/_jsxDEV(ViewPad, {\n      padID: padID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 4\n  }, this);\n};\n\n_s(UserPads, \"hEol8O28SiaGMJnjC0cglc4HVxE=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = UserPads;\nexport default UserPads;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPads\");","map":{"version":3,"sources":["C:/Users/JP/Documents/GitHub/etherpad-artense-client/src/components/UserPads/UserPads.js"],"names":["pad","author","useEffect","React","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","useState","Link","ViewPad","useHistory","useParams","react","UserPads","props","authorID","setAuthorID","padNames","setPadNames","Array","padID","setPadID","undefined","history","params","ListPadsOfAuthor","then","data","console","log","catch","err","error","ListAllPads","padIDs","showViewPad","createPad","minWidth","slice","map","row","border"],"mappings":"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","sourcesContent":["import * as pad from \"../../etherpad/Pad\"\r\nimport * as author from \"../../etherpad/Author\"\r\nimport { useEffect } from \"react\"\r\nimport * as React from 'react';\r\nimport {Table} from '@material-ui/core';\r\nimport {TableBody} from '@material-ui/core';\r\nimport {TableCell} from '@material-ui/core';\r\nimport {TableContainer} from '@material-ui/core';\r\nimport {TableHead} from '@material-ui/core';\r\nimport {TableRow} from '@material-ui/core';\r\nimport {Paper} from '@material-ui/core'\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {ViewPad} from \"./ViewPad\"\r\nimport { useHistory , useParams} from \"react-router-dom\";\r\n\r\nimport react from \"react\";\r\n//import Paper from '@mui/material/Paper';\r\n\r\nconst UserPads = (props) => {\r\n    const [authorID, setAuthorID] = useState(props.authorID)\r\n    const [padNames, setPadNames] = useState(Array())\r\n    const [padID, setPadID] = useState(undefined)\r\n    const history = useHistory()\r\n  const params = useParams()\r\nuseEffect(() => {\r\n\r\n    if(authorID) {\r\n        author.ListPadsOfAuthor(authorID).then((data) => {\r\n            console.log(\"List author pads\")\r\n            console.log(data)\r\n            setPadNames(data)           \r\n        }).catch((err) => {\r\n            console.error(err)\r\n        })\r\n    } else {\r\n        pad.ListAllPads().then((data) => {\r\n            console.log(\"List all pads\")\r\n            console.log(data)\r\n            console.log(data?.data)\r\n            console.log(data?.data?.data)\r\n            console.log(data?.data?.data?.data?.padIDs)\r\n            setPadNames(data?.data?.data?.data?.padIDs)\r\n        }).catch((err) => {\r\n            console.error(err)\r\n        })\r\n    }\r\n}, [authorID, padID])\r\n//<TableContainer component={Paper}>  \r\n//  component={ViewPad} to={`/pad`}\r\nfunction showViewPad(padID)  {\r\n  // I need to change the text\r\n  pad.ListAllPads().then((data) => {\r\n    console.log(\"List all pads\")\r\n    console.log(data)\r\n    console.log(data?.data)\r\n    console.log(data?.data?.data)\r\n    console.log(data?.data?.data?.data?.padIDs)\r\n    setPadID(padID)\r\n    // setPadNames(data?.data?.data?.data?.padIDs)\r\n}).catch((err) => {\r\n    console.error(err)\r\n})\r\n\r\n  \r\n  // history.push(\"/viewPad\")\r\n}\r\nuseEffect(() => {\r\nif(!padID) return \r\n\r\n\r\n\r\n\r\n}, [padID])\r\n\r\n\r\n return(\r\n   <div>\r\n     <button onClick={async () => {\r\n      const data = await pad.createPad(\"1212\", \"two\")\r\n      console.log(data)\r\n      setPadID(data?.padID)}}>Create Pad</button>\r\n\r\n\r\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Dessert (100g serving)</TableCell>\r\n              </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {padNames?.slice(-5).map((row) => (\r\n              <TableRow\r\n                key={row}\r\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\r\n                <TableCell align=\"right\" onClick={() => {\r\n                  showViewPad(row)}}>\r\n                    {row}\r\n                </TableCell>       \r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        {padID && <ViewPad padID={padID}></ViewPad>}\r\n        </div>\r\n  \r\n )   \r\n    \r\n}\r\n\r\n               \r\nexport default UserPads"]},"metadata":{},"sourceType":"module"}