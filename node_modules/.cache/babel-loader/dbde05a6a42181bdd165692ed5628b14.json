{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JP\\\\Documents\\\\GitHub\\\\etherpad-artense-client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport * as api from \"./api/server\";\nimport $ from \"cash-dom\"; //const eejs = require('ep_etherpad-lite/node/eejs/');\n//const settings = require('ep_etherpad-lite/node/utils/Settings');\n//exports.eejsBlock_editbarMenuRight = function (hook_name, args, cb) {\n//  args.content = eejs.content=\"foo\"; return cb(); };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // const [padID, setPadID] = useState(undefined);\n  const [groupID, setGroupID] = useState(undefined);\n  const [authorID, setAuthorID] = useState(undefined); //const [sessionID, setSessionID] = useState(undefined);\n\n  const [etherpad, setEtherpad] = useState(undefined);\n  const [groupPad, setGroupPad] = useState(undefined); //etherpad.createPad('howdy', [\"kekek\"])\n  // group\n\n  useEffect(() => {\n    api.testPad().then(res => {\n      console.log(\"useeffect\");\n      console.log(res);\n      let http = \"http://localhost:9001/p/\";\n      let padID = res.groupPadID;\n      let sessionID = res.sessionID;\n      console.log(sessionID); //  document.cookie = `sessionID=${sessionID}`;\n      // console.log(\"Document Cookies: \" + document.cookie)\n\n      setGroupPad(res.padLocation); //setGroupPad(`${http}${padID}` + \"?showChat=false&showLineNumbers=false\")\n    });\n    api.testPad_setText().then(res => {\n      return res;\n    });\n    /*api.createGroupPad().then((res) => {\n    console.log(\"useeffect\")\n    console.log(res)\n    let http = \"http://localhost:9001/p/\"\n    let padID = res.groupPadID\n    let sessionID = res.sessionID\n    console.log(sessionID)\n    \n      document.cookie = `sessionID=${sessionID}`;\n      console.log(\"Document Cookies: \" + document.cookie)\n    setGroupPad(`${http}${padID}` + \"?showChat=false&showLineNumbers=false\")\n    \n    })*/\n  }, []);\n\n  function removeEmpty(obj) {\n    return Object.keys(obj).filter(function (k) {\n      return obj[k] != null;\n    }).reduce(function (acc, k) {\n      acc[k] = obj[k];\n      return acc;\n    }, {});\n  }\n\n  const activateLasers = () => {\n    api.testPad_getHTML().then(res => {\n      console.log(res);\n      console.log(res.data);\n      console.log(res.data.html);\n      console.log(\"Get HTML\");\n      console.log($.parseHTML(res.data.html));\n      $.parseHTML(res.data.html);\n      console.log($(res.data.html));\n      $(res.data.html);\n      let a = $.parseHTML(res.data.html);\n      console.log(a[0]);\n      console.log(a[1]);\n      console.log(typeof a[1]);\n      console.log(removeEmpty(a[1]));\n      console.log(removeEmpty(a)[1]);\n      console.log(removeEmpty(a).em);\n      console.log(a.keys);\n      console.log($(\"em\", a).val());\n      $.each(a, function (i, el) {\n        console.log(el);\n        console.log(el.nodeName);\n        console.log(removeEmpty(el)); //nodeNames[ i ] = \"<li>\" + el.nodeName + \"</li>\";\n      });\n      console.log(typeof a); //console.log(removeEmpty(a.text))\n\n      return res;\n    });\n    /*   api.testPad_getText().then((res) => {\n         console.log(res)\n         console.log(res.data)\n         console.log(res.data.text)\n         console.log(\"Get Text\")\n         \n         console.log($.parseHTML(res.data.text))\n         $.parseHTML(res.data.text)\n         console.log($(res.data.text))\n         $(res.data.text)\n         \n         return res\n         })*/\n  };\n  /*  \n  let api1 = require(\"etherpad-lite-client\");\n  //console.log(api1)\n  // alert(api1)\n  let etherpad = api1.connect({\n    apikey: \"308c704c36b41c846ba1713a59f92c6a9707ced910894de32070287a03bfcb68\",\n    host: \"localhost\",\n    port: 9001,\n    rejectUnauthorized: false//,\n    //sessionkey: \"7b52fbcb43a53ffe28c57280c259cdabcad1d5ade05ea23e8af0e43ae3d289ab\"\n  });\n  setEtherpad(etherpad)\n  \n  etherpad.createPad(\"tempPad\",[,\"hello\"], function (error, data1) { // author\n  if (error) console.log(\"Error creating author: \" + error.message);\n  else console.log(\"New pad created: \" + data1.authorID);\n  setPadID(data1.authorID);\n  })\n  //etherpad.setText(\"tempPad\", \"yes\" )\n    \n   // console.log(etherpad)\n    \n    etherpad.createAuthor([\"javon-test1\"], function (error, data1) { // author\n      if (error) console.log(\"Error creating author: \" + error.message);\n      else console.log(\"New author1 created: \" + data1.authorID);\n      setAuthorID(data1.authorID);\n      //alert(\"Author id1\" + data1.authorID);\n      \n      \n      etherpad.createGroup(function(error, data) {\n        if(error) console.error('Error creating group: ' + error.message)\n        else console.log('New group created: ' + data.groupID)\n         setGroupID(data.groupID)\n          var args = {\n          groupID: data.groupID,\n          padName: \"testpad\",\n          text: \"Hello world!\",\n        };\n       \n  \n        etherpad.createGroupPad(args, function (error, data2) {\n          if (error) console.error(\"Error creating pad: \" + error.message);\n          else console.log(\"New pad created: \" + data2.padID);\n  \n          if (data2.padID) setPadID(data2.padID);\n          //alert(data2.padID)\n           \n        })\n            \n            \n      \n          });\n        \n        })\n      }, []);\n      \n        useEffect(() => { \n         if(groupID !== undefined & authorID !== undefined ) {\n  console.log(groupID)\n  console.log(authorID)\n        \n      etherpad.createSession(authorID,groupID,          1312201246 ,\n        function(error, data) {\n  console.log(\"worked\")\n         });\n        } else {\n          console.log(\"tried\")\n        }\n    }, [groupID, authorID, padID]);\n      \n            // create session\n          etherpad.createSession(         data.groupID,            data1.authorID,            1312201246);\n           , function (error, data3) {\n  if (error) console.log(\"Error creating session: \" + error.message);\n  else console.log(\"New session created: \" + data3.sessionID);\n  setSessionID(data3.sessionID)\n  console.log(data3)\n  alert(data3.sessionID)\n  });*/\n\n  /*    etherpad.createAuthorIfNotExistsFor(8, [\"javon-test2\"], function (error, data1) {\n      if (error) console.log(\"Error creating author: \" + error.message);\n      else console.log(\"New author created: \" + data1.authorID);\n      setAuthorID(data1.authorID);\n      console.log(data1)\n      alert(\"Author id\" + data1.authorID);\n    })\n   //  Portal maps the internal userid to an etherpad group:\n  Request: http://pad.domain/api/1/createAuthorIfNotExistsFor?apikey=secret&name=Michael&authorMapper=7\n    \n    Response: {code: 0, message:\"ok\", data: {authorID: \"a.s8oes9dhwrvt0zif\"}}\n  \n    \n    Request: http://pad.domain/api/1/createGroupIfNotExistsFor?apikey=secret&groupMapper=7\n    \n    Response: {code: 0, message:\"ok\", data: {groupID: \"g.s8oes9dhwrvt0zif\"}}\n    \n    Portal creates a pad in the userGroup\n    \n    Request: http://pad.domain/api/1/createGroupPad?apikey=secret&groupID=g.s8oes9dhwrvt0zif&padName=samplePad&text=This is the first sentence in the pad\n    \n    Response: {code: 0, message:\"ok\", data: null}\n    \n    Portal starts the session for the user on the group:\n    \n    Request: http://pad.domain/api/1/createSession?apikey=secret&groupID=g.s8oes9dhwrvt0zif&authorID=a.s8oes9dhwrvt0zif&validUntil=1312201246\n    \n    Response: {\"data\":{\"sessionID\": \"s.s8oes9dhwrvt0zif\"}}\n    \n    Portal places the cookie \"sessionID\" with the given value on the client and creates an iframe including the pad.\n  */\n  //   etherpad.createPad('howdy', [\"yes\"])\n\n  /*     , function(error, data){\n         if (error) console.log(\"Error creating text: \" + error.message);\n         else console.log(\"New pad created: \" + data);\n         setSessionID('howdy')\n       })*/\n  //  etherpad.setText('howdy', 'hello')\n  //setSessionID('howdy')\n  //   console.log(etherpad.getText('howdy', [1]))\n  // etherpad.getHTML('howdy').then((e) => {\n  //   console.log(e)\n  // })\n\n  /*   etherpad.getHTML('howdy').then((e, d) => {\n      console.log(e)\n      console.log(d)\n    })*/\n\n  /*     \n       , function(error, data){\n         if (error) console.log(\"Error creating text: \" + error.message);\n         else console.log(\"New author created: \" + data);\n         setSessionID('howdy')\n         console.log(\"hehllo\")\n       })\n    */\n\n  /** \n  , function (error, d) {\n    if (error) console.log(\"Error creating author: \" + error.message);\n    else console.log(\"New text created: \" + d);\n    alert(\"text id\" + d)\n    console.log(d)\n  \n  })\n  \n  \n  etherpad.createAuthorIfNotExistsFor(8, [\"javon-test2\"], function (error, data1) {\n    if (error) console.log(\"Error creating author: \" + error.message);\n    else console.log(\"New author created: \" + data1.authorID);\n    setAuthorID(data1.authorID);\n    alert(\"Author id\" + data1.authorID);\n  })\n  etherpad.createAuthor([\"javon-test1\"], function (error, data1) {\n    if (error) console.log(\"Error creating author: \" + error.message);\n    else console.log(\"New author1 created: \" + data1.authorID);\n    setAuthorID(data1.authorID);\n    //alert(\"Author id1\" + data1.authorID);\n  })\n  \n  \n  etherpad.createAuthorIfNotExistsFor(7, [\"javon-test\"], function (error, data1) {\n      if (error) console.log(\"Error creating author: \" + error.message);\n      else console.log(\"New author created: \" + data1.authorID);\n      setAuthorID(data1.authorID);\n      alert(\"Author id\" + data1.authorID);\n  \n      etherpad.createGroupIfNotExistsFor(7, function (error, data) {\n        if (error) console.error(\"Error creating group: \" + error.message);\n        else console.log(\"New group created: \" + data.groupID);\n        setGroupID(data.groupID);\n        alert(\"Group pad\" + data.groupID);\n        // author\n        // createAuthorIfNotExistsFor;\n        var args = {\n          groupID: data.groupID,\n          padName: \"testpad\",\n          text: \"Hello world!\",\n        };\n        etherpad.createGroupPad(args, function (error, data2) {\n          if (error) console.error(\"Error creating pad: \" + error.message);\n          else console.log(\"New pad created: \" + data2.padID);\n  \n          if (data2.padID) setPadID(data2.padID);\n          alert(data2.padID)\n          etherpad.createSession(\n            data.groupID,\n            data1.authorID,\n            1312201246);\n           , function (error, data3) {\n  if (error) console.log(\"Error creating session: \" + error.message);\n  else console.log(\"New session created: \" + data3.sessionID);\n  setSessionID(data3.sessionID)\n  console.log(data3)\n  alert(data3.sessionID)\n  });\n        });\n      });\n    }\n  );\n  \n    etherpad.createPad(\"test1\", [\"hello\"],\n      function (error, data) {\n        if (error) console.error('Error creating pad: ' + error.message)\n        else console.log('New pad created: ' + data.padID)\n  \n        if(padID === undefined) {\n          setPadID(data.padID)\n        }\n  \n      })\n      {padID && (\n            <iframe\n              src={\n                \"http://localhost:9001/p/\" + \"tempPad\" +\n                \n                \"?showChat=false&showLineNumbers=false\"\n              }\n              width={600}\n              height={400}\n            ></iframe>\n          )}\n          <iframe\n            src={\n              \"http://localhost:9001/p/\" +\n              padID +\n              \"?showChat=false&showLineNumbers=false\"\n            }\n            width={600}\n            height={400}\n          ></iframe>\n            <iframe\n            src={\n              \"http://localhost:9001/p/\" +\n              sessionID +\n              \"?showChat=false&showLineNumbers=false\"\n            }\n            width={600}\n            height={400}\n          ></iframe>*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: groupID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: activateLasers,\n        children: \"GET HTML\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: authorID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n        src: groupPad,\n        width: 600,\n        height: 400\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 16\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 389,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"HjoSl4yplnTtru4IbdLs9vR7J1Q=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/JP/Documents/GitHub/etherpad-artense-client/src/App.js"],"names":["React","useEffect","useState","api","$","App","groupID","setGroupID","undefined","authorID","setAuthorID","etherpad","setEtherpad","groupPad","setGroupPad","testPad","then","res","console","log","http","padID","groupPadID","sessionID","padLocation","testPad_setText","removeEmpty","obj","Object","keys","filter","k","reduce","acc","activateLasers","testPad_getHTML","data","html","parseHTML","a","em","val","each","i","el","nodeName","logo"],"mappings":"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,OAAO,CAACC,GAAR,CAAYoB,CAAC,CAACV,IAAd;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAYf,CAAC,CAAC,IAAD,EAAOmC,CAAP,CAAD,CAAWE,GAAX,EAAZ;AAEArC,MAAAA,CAAC,CAACsC,IAAF,CAAQH,CAAR,EAAW,UAAUI,CAAV,EAAaC,EAAb,EAAkB;AAC3B1B,QAAAA,OAAO,CAACC,GAAR,CAAYyB,EAAZ;AACA1B,QAAAA,OAAO,CAACC,GAAR,CAAYyB,EAAE,CAACC,QAAf;AACA3B,QAAAA,OAAO,CAACC,GAAR,CAAYO,WAAW,CAACkB,EAAD,CAAvB,EAH2B,CAI3B;AACD,OALD;AAOA1B,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAOoB,CAAnB,EA5BkC,CA6BlC;;AAEA,aAAOtB,GAAP;AACD,KAhCD;AAiCD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,GA/CD;AAgDA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAeE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;;AACF;AACA;AACA;AACA;AACA;AAEE;AACA;AAEA;AACA;AACA;AACA;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE;AAAK,QAAA,GAAG,EAAE6B,IAAV;AAAgB,QAAA,SAAS,EAAC,UAA1B;AAAqC,QAAA,GAAG,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,cADF,eAEN;AAAA,kBAAIxC;AAAJ;AAAA;AAAA;AAAA;AAAA,cAFM,eAGN;AAAQ,QAAA,OAAO,EAAE4B,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHM,eAMN;AAAA,kBAAIzB;AAAJ;AAAA;AAAA;AAAA;AAAA,cANM,eAON;AACU,QAAA,GAAG,EAAEI,QADf;AAEU,QAAA,KAAK,EAAE,GAFjB;AAGU,QAAA,MAAM,EAAE;AAHlB;AAAA;AAAA;AAAA;AAAA,cAPM,eAYE;AAAA,yCACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADP;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF,eAeE;AACE,QAAA,SAAS,EAAC,UADZ;AAEE,QAAA,IAAI,EAAC,qBAFP;AAGE,QAAA,MAAM,EAAC,QAHT;AAIE,QAAA,GAAG,EAAC,qBAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD;;GAlZQR,G;;KAAAA,G;AAoZT,eAAeA,GAAf","sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport * as api from \"./api/server\"\nimport $ from \"cash-dom\";\n//const eejs = require('ep_etherpad-lite/node/eejs/');\n//const settings = require('ep_etherpad-lite/node/utils/Settings');\n\n//exports.eejsBlock_editbarMenuRight = function (hook_name, args, cb) {\n//  args.content = eejs.content=\"foo\"; return cb(); };\n\n\n\nfunction App() {\n // const [padID, setPadID] = useState(undefined);\n  const [groupID, setGroupID] = useState(undefined);\n  const [authorID, setAuthorID] = useState(undefined);\n  //const [sessionID, setSessionID] = useState(undefined);\n  const [etherpad, setEtherpad] = useState(undefined)\n  const [groupPad, setGroupPad] = useState(undefined)\n \n\n  //etherpad.createPad('howdy', [\"kekek\"])\n \n\n\n  // group\n  useEffect(() => {\n\napi.testPad().then((res) => {\n\n\n  console.log(\"useeffect\")\n  console.log(res)\n  let http = \"http://localhost:9001/p/\"\n  let padID = res.groupPadID\n  let sessionID = res.sessionID\n  console.log(sessionID)\n  \n  //  document.cookie = `sessionID=${sessionID}`;\n   // console.log(\"Document Cookies: \" + document.cookie)\nsetGroupPad(res.padLocation)\n  //setGroupPad(`${http}${padID}` + \"?showChat=false&showLineNumbers=false\")\n  \n})\n\napi.testPad_setText().then((res) => {\n  return res\n})\n\n\n/*api.createGroupPad().then((res) => {\nconsole.log(\"useeffect\")\nconsole.log(res)\nlet http = \"http://localhost:9001/p/\"\nlet padID = res.groupPadID\nlet sessionID = res.sessionID\nconsole.log(sessionID)\n\n  document.cookie = `sessionID=${sessionID}`;\n  console.log(\"Document Cookies: \" + document.cookie)\nsetGroupPad(`${http}${padID}` + \"?showChat=false&showLineNumbers=false\")\n\n})*/\n\n\n  }, [])\n\n  function removeEmpty(obj) {\n    return Object.keys(obj)\n      .filter(function (k) {\n        return obj[k] != null;\n      })\n      .reduce(function (acc, k) {\n        acc[k] = obj[k];\n        return acc;\n      }, {});\n  }\n\n  const activateLasers = () => {\n    api.testPad_getHTML().then((res) => {\n      console.log(res)\n      console.log(res.data)\n      console.log(res.data.html)\n      console.log(\"Get HTML\")\n      \n      console.log($.parseHTML(res.data.html))\n      $.parseHTML(res.data.html)\n      console.log($(res.data.html))\n      $(res.data.html)\n      let a = $.parseHTML(res.data.html)\n      \n      console.log(a[0])\n      console.log(a[1])\n      console.log(typeof(a[1]))\n      console.log(removeEmpty(a[1]))\n      console.log(removeEmpty(a)[1])\n      console.log(removeEmpty(a).em)\n      console.log(a.keys)\n      console.log($(\"em\", a).val())\n      \n      $.each( a, function( i, el ) {\n        console.log(el)\n        console.log(el.nodeName)\n        console.log(removeEmpty(el))\n        //nodeNames[ i ] = \"<li>\" + el.nodeName + \"</li>\";\n      });\n\n      console.log(typeof(a))\n      //console.log(removeEmpty(a.text))\n      \n      return res\n    })\n   /*   api.testPad_getText().then((res) => {\n        console.log(res)\n        console.log(res.data)\n        console.log(res.data.text)\n        console.log(\"Get Text\")\n        \n        console.log($.parseHTML(res.data.text))\n        $.parseHTML(res.data.text)\n        console.log($(res.data.text))\n        $(res.data.text)\n        \n        return res\n        })*/\n  }\n  /*  \n  let api1 = require(\"etherpad-lite-client\");\n  //console.log(api1)\n  // alert(api1)\n  let etherpad = api1.connect({\n    apikey: \"308c704c36b41c846ba1713a59f92c6a9707ced910894de32070287a03bfcb68\",\n    host: \"localhost\",\n    port: 9001,\n    rejectUnauthorized: false//,\n    //sessionkey: \"7b52fbcb43a53ffe28c57280c259cdabcad1d5ade05ea23e8af0e43ae3d289ab\"\n  });\nsetEtherpad(etherpad)\n  \n\netherpad.createPad(\"tempPad\",[,\"hello\"], function (error, data1) { // author\n  if (error) console.log(\"Error creating author: \" + error.message);\n  else console.log(\"New pad created: \" + data1.authorID);\n  setPadID(data1.authorID);\n})\n\n//etherpad.setText(\"tempPad\", \"yes\" )\n    \n   // console.log(etherpad)\n    \n    etherpad.createAuthor([\"javon-test1\"], function (error, data1) { // author\n      if (error) console.log(\"Error creating author: \" + error.message);\n      else console.log(\"New author1 created: \" + data1.authorID);\n      setAuthorID(data1.authorID);\n      //alert(\"Author id1\" + data1.authorID);\n      \n      \n      etherpad.createGroup(function(error, data) {\n        if(error) console.error('Error creating group: ' + error.message)\n        else console.log('New group created: ' + data.groupID)\n\n        setGroupID(data.groupID)\n\n\n        var args = {\n          groupID: data.groupID,\n          padName: \"testpad\",\n          text: \"Hello world!\",\n        };\n       \n  \n        etherpad.createGroupPad(args, function (error, data2) {\n          if (error) console.error(\"Error creating pad: \" + error.message);\n          else console.log(\"New pad created: \" + data2.padID);\n  \n          if (data2.padID) setPadID(data2.padID);\n          //alert(data2.padID)\n\n          \n        })\n            \n            \n      \n          });\n        \n\n\n      })\n      }, []);\n      \n\n\n      useEffect(() => { \n\n        if(groupID !== undefined & authorID !== undefined ) {\nconsole.log(groupID)\nconsole.log(authorID)\n        \n      etherpad.createSession(authorID,groupID,          1312201246 ,\n        function(error, data) {\nconsole.log(\"worked\")\n\n        });\n        } else {\n          console.log(\"tried\")\n        }\n    }, [groupID, authorID, padID]);\n      \n            // create session\n          etherpad.createSession(         data.groupID,            data1.authorID,            1312201246);\n           , function (error, data3) {\n  if (error) console.log(\"Error creating session: \" + error.message);\n  else console.log(\"New session created: \" + data3.sessionID);\n  setSessionID(data3.sessionID)\n  console.log(data3)\n  alert(data3.sessionID)\n  });*/\n\n\n  /*    etherpad.createAuthorIfNotExistsFor(8, [\"javon-test2\"], function (error, data1) {\n      if (error) console.log(\"Error creating author: \" + error.message);\n      else console.log(\"New author created: \" + data1.authorID);\n      setAuthorID(data1.authorID);\n      console.log(data1)\n      alert(\"Author id\" + data1.authorID);\n    })\n\n  //  Portal maps the internal userid to an etherpad group:\n  Request: http://pad.domain/api/1/createAuthorIfNotExistsFor?apikey=secret&name=Michael&authorMapper=7\n    \n    Response: {code: 0, message:\"ok\", data: {authorID: \"a.s8oes9dhwrvt0zif\"}}\n  \n    \n    Request: http://pad.domain/api/1/createGroupIfNotExistsFor?apikey=secret&groupMapper=7\n    \n    Response: {code: 0, message:\"ok\", data: {groupID: \"g.s8oes9dhwrvt0zif\"}}\n    \n    Portal creates a pad in the userGroup\n    \n    Request: http://pad.domain/api/1/createGroupPad?apikey=secret&groupID=g.s8oes9dhwrvt0zif&padName=samplePad&text=This is the first sentence in the pad\n    \n    Response: {code: 0, message:\"ok\", data: null}\n    \n    Portal starts the session for the user on the group:\n    \n    Request: http://pad.domain/api/1/createSession?apikey=secret&groupID=g.s8oes9dhwrvt0zif&authorID=a.s8oes9dhwrvt0zif&validUntil=1312201246\n    \n    Response: {\"data\":{\"sessionID\": \"s.s8oes9dhwrvt0zif\"}}\n    \n    Portal places the cookie \"sessionID\" with the given value on the client and creates an iframe including the pad.\n*/\n  //   etherpad.createPad('howdy', [\"yes\"])\n/*     , function(error, data){\n       if (error) console.log(\"Error creating text: \" + error.message);\n       else console.log(\"New pad created: \" + data);\n       setSessionID('howdy')\n     })*/\n \n  //  etherpad.setText('howdy', 'hello')\n  //setSessionID('howdy')\n\n  //   console.log(etherpad.getText('howdy', [1]))\n  // etherpad.getHTML('howdy').then((e) => {\n  //   console.log(e)\n  // })\n\n/*   etherpad.getHTML('howdy').then((e, d) => {\n    console.log(e)\n    console.log(d)\n  })*/\n  \n/*     \n     , function(error, data){\n       if (error) console.log(\"Error creating text: \" + error.message);\n       else console.log(\"New author created: \" + data);\n       setSessionID('howdy')\n       console.log(\"hehllo\")\n     })\n  */\n\n \n\n/** \n, function (error, d) {\n  if (error) console.log(\"Error creating author: \" + error.message);\n  else console.log(\"New text created: \" + d);\n  alert(\"text id\" + d)\n  console.log(d)\n\n})\n\n\netherpad.createAuthorIfNotExistsFor(8, [\"javon-test2\"], function (error, data1) {\n  if (error) console.log(\"Error creating author: \" + error.message);\n  else console.log(\"New author created: \" + data1.authorID);\n  setAuthorID(data1.authorID);\n  alert(\"Author id\" + data1.authorID);\n})\netherpad.createAuthor([\"javon-test1\"], function (error, data1) {\n  if (error) console.log(\"Error creating author: \" + error.message);\n  else console.log(\"New author1 created: \" + data1.authorID);\n  setAuthorID(data1.authorID);\n  //alert(\"Author id1\" + data1.authorID);\n})\n\n\netherpad.createAuthorIfNotExistsFor(7, [\"javon-test\"], function (error, data1) {\n    if (error) console.log(\"Error creating author: \" + error.message);\n    else console.log(\"New author created: \" + data1.authorID);\n    setAuthorID(data1.authorID);\n    alert(\"Author id\" + data1.authorID);\n\n    etherpad.createGroupIfNotExistsFor(7, function (error, data) {\n      if (error) console.error(\"Error creating group: \" + error.message);\n      else console.log(\"New group created: \" + data.groupID);\n      setGroupID(data.groupID);\n      alert(\"Group pad\" + data.groupID);\n      // author\n      // createAuthorIfNotExistsFor;\n      var args = {\n        groupID: data.groupID,\n        padName: \"testpad\",\n        text: \"Hello world!\",\n      };\n      etherpad.createGroupPad(args, function (error, data2) {\n        if (error) console.error(\"Error creating pad: \" + error.message);\n        else console.log(\"New pad created: \" + data2.padID);\n\n        if (data2.padID) setPadID(data2.padID);\n        alert(data2.padID)\n        etherpad.createSession(\n          data.groupID,\n          data1.authorID,\n          1312201246);\n         , function (error, data3) {\nif (error) console.log(\"Error creating session: \" + error.message);\nelse console.log(\"New session created: \" + data3.sessionID);\nsetSessionID(data3.sessionID)\nconsole.log(data3)\nalert(data3.sessionID)\n});\n      });\n    });\n  }\n);\n\n  etherpad.createPad(\"test1\", [\"hello\"],\n    function (error, data) {\n      if (error) console.error('Error creating pad: ' + error.message)\n      else console.log('New pad created: ' + data.padID)\n\n      if(padID === undefined) {\n        setPadID(data.padID)\n      }\n\n    })\n    {padID && (\n          <iframe\n            src={\n              \"http://localhost:9001/p/\" + \"tempPad\" +\n              \n              \"?showChat=false&showLineNumbers=false\"\n            }\n            width={600}\n            height={400}\n          ></iframe>\n        )}\n        <iframe\n          src={\n            \"http://localhost:9001/p/\" +\n            padID +\n            \"?showChat=false&showLineNumbers=false\"\n          }\n          width={600}\n          height={400}\n        ></iframe>\n          <iframe\n          src={\n            \"http://localhost:9001/p/\" +\n            sessionID +\n            \"?showChat=false&showLineNumbers=false\"\n          }\n          width={600}\n          height={400}\n        ></iframe>*/\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n<p>{groupID}</p>\n<button onClick={activateLasers}>\n GET HTML\n</button>\n<p>{authorID}</p>\n<iframe\n          src={groupPad        }\n          width={600}\n          height={400}\n        ></iframe>\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}