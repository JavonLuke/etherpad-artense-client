{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport axios from \"axios\";\nexport const Pad = props => {};\n_c = Pad;\nexport const PadAPI = props => {\n  _s();\n\n  // create Pad - ensure that you are logged in to create a pad\n  // get Pad - pass an iframe\n  // delete Pad\n  // get Pad HTML - pass html\n  // is valid author\n  const [authorID, setAuthorID] = useState(props.authorID);\n  const [padID, setPadID] = useState(props.padID);\n  const [etherpadOptions, setEtherpadOptions] = useState(props.etherpadOptions);\n  let apiKey = \"308c704c36b41c846ba1713a59f92c6a9707ced910894de32070287a03bfcb68\";\n  let apiVersion = \"1.2.14\";\n  let site = \"localhost\";\n  let connectionType = \"http\";\n  let port = \":9001\"; // don't forget colon\n\n  let createAuthor_endpoint = 'createAuthor';\n  let createSession_endpoint = 'createSession';\n  let createGroup_endpoint = 'createGroup';\n  let validUntil_endpoint = 2312905480;\n  let createGroupPadID_endpoint = 'createGroupPad';\n  let createPadID_endpoint = 'createPad';\n  let defaultText = \"\";\n  let testPadName = \"testCreatePad\";\n  let testText = \"this is the first sentence - testing\";\n  let clientLocation = \"http://localhost:9001/p/\";\n\n  const endPoint = point => `${connectionType}://${site}${port}/api/${apiVersion}/${point}?apikey=${apiKey}`;\n\n  const testPad = async () => {\n    console.log(\"Attempting to test pad\");\n    let authorID = await axios.get(endPoint(createAuthor_endpoint)).then(res => {\n      console.log(\"Author Created: \" + res.data.data.authorID);\n      return res.data.data.authorID;\n    });\n    console.log(authorID); // let groupPadEndPoint_endpoint = `${endPoint(createGroupPadID_endpoint)}` + `&groupID=${groupID}` + `&padName=${\"testPadName\"}` +\n    // `&text=${testText}`\n\n    let padEndPoint_endpoint = `${endPoint(createPadID_endpoint)}` + `&padID=testCreatePad` + `&text=${testText}`;\n    let groupPadID = await axios.get(padEndPoint_endpoint).then(res => {\n      console.log(res);\n\n      if (res.data.data === null) {\n        return \"testCreatePad\";\n      }\n\n      console.log(\"Pad Created: \" + res.data.data.padID);\n      return res.data.data.padID;\n    });\n    let padLocation = `${clientLocation}${groupPadID}`; // + translateEtherpadOptions(etherpadOptions)\n\n    return {\n      \"authorID\": authorID,\n      \"groupPadID\": groupPadID,\n      \"clientLocation\": clientLocation,\n      \"padLocation\": padLocation\n    };\n  };\n\n  const testPad_setText = async () => {\n    let padEndPoint_endpoint = `${endPoint(\"setText\")}` + `&padID=${testPadName}` + `&text=I Just Set the text`;\n    await axios.get(padEndPoint_endpoint).then(res => {\n      console.log(res);\n      console.log(\"Pad text set: \"); // return res.data.data.padID\n    });\n  };\n\n  const testPad_getHTML = async () => {\n    let padEndPoint_endpoint = `${endPoint(\"getHTML\")}` + `&padID=${testPadName}`;\n    return await axios.get(padEndPoint_endpoint).then(res => {\n      console.log(res);\n      console.log(\"Pad get HTML\"); // return res.data.data.padID\n\n      return res.data;\n    });\n  };\n};\n\n_s(PadAPI, \"uKjtD7LaXQxXJT098SG1sY5oMxk=\");\n\n_c2 = PadAPI;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Pad\");\n$RefreshReg$(_c2, \"PadAPI\");","map":{"version":3,"sources":["C:/Users/JP/Documents/GitHub/etherpad-artense-client/src/etherpad/Pad.js"],"names":["useState","axios","Pad","props","PadAPI","authorID","setAuthorID","padID","setPadID","etherpadOptions","setEtherpadOptions","apiKey","apiVersion","site","connectionType","port","createAuthor_endpoint","createSession_endpoint","createGroup_endpoint","validUntil_endpoint","createGroupPadID_endpoint","createPadID_endpoint","defaultText","testPadName","testText","clientLocation","endPoint","point","testPad","console","log","get","then","res","data","padEndPoint_endpoint","groupPadID","padLocation","testPad_setText","testPad_getHTML"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nexport const Pad = (props) => {\r\n\r\n\r\n}\r\n\r\n\r\nexport const PadAPI = (props) => {\r\n    // create Pad - ensure that you are logged in to create a pad\r\n    // get Pad - pass an iframe\r\n    // delete Pad\r\n    // get Pad HTML - pass html\r\n    // is valid author\r\n  \r\n    const [authorID, setAuthorID] = useState(props.authorID);\r\n    const [padID, setPadID] = useState(props.padID)\r\n    const [etherpadOptions, setEtherpadOptions] = useState(props.etherpadOptions);\r\n    let apiKey = \"308c704c36b41c846ba1713a59f92c6a9707ced910894de32070287a03bfcb68\"\r\n    let apiVersion = \"1.2.14\"\r\n    let site = \"localhost\"\r\n    let connectionType = \"http\"\r\n    let port = \":9001\" // don't forget colon\r\n    let createAuthor_endpoint = 'createAuthor'\r\n    let createSession_endpoint = 'createSession'\r\n    let createGroup_endpoint = 'createGroup'\r\n    let validUntil_endpoint = 2312905480;\r\n    let createGroupPadID_endpoint = 'createGroupPad'\r\n    let createPadID_endpoint = 'createPad'\r\n    let defaultText = \"\";\r\n    let testPadName = \"testCreatePad\"\r\n    let testText = \"this is the first sentence - testing\"\r\n    let clientLocation = \"http://localhost:9001/p/\"\r\n\r\n\r\n\r\n    const endPoint = (point) => `${connectionType}://${site}${port}/api/${apiVersion}/${point}?apikey=${apiKey}`;\r\n\r\n     const testPad = async () => {\r\n        console.log(\"Attempting to test pad\")\r\n        let authorID = await axios.get(endPoint(createAuthor_endpoint)).then((res) => {\r\n            console.log(\"Author Created: \" + res.data.data.authorID)\r\n            return res.data.data.authorID\r\n        })\r\n        console.log(authorID)\r\n        \r\n        \r\n       // let groupPadEndPoint_endpoint = `${endPoint(createGroupPadID_endpoint)}` + `&groupID=${groupID}` + `&padName=${\"testPadName\"}` +\r\n       // `&text=${testText}`\r\n        \r\n    \r\n    \r\n        let padEndPoint_endpoint = `${endPoint(createPadID_endpoint)}` + `&padID=testCreatePad` + `&text=${testText}`\r\n    \r\n        let groupPadID = await axios.get(padEndPoint_endpoint).then((res) => {\r\n            console.log(res)\r\n            if(res.data.data === null) {\r\n                return \"testCreatePad\"\r\n            }\r\n            console.log(\"Pad Created: \" + res.data.data.padID)\r\n            return res.data.data.padID\r\n        })\r\n    \r\n        let padLocation = `${clientLocation}${groupPadID}`// + translateEtherpadOptions(etherpadOptions)\r\n    \r\n        return { \"authorID\": authorID,\r\n        \r\n    \"groupPadID\": groupPadID,\r\n    \"clientLocation\": clientLocation,\r\n    \"padLocation\": padLocation}\r\n    }\r\n    \r\n     const testPad_setText = async () => {\r\n    \r\n        let padEndPoint_endpoint = `${endPoint(\"setText\")}` + `&padID=${testPadName}` + `&text=I Just Set the text`\r\n    \r\n     await axios.get(padEndPoint_endpoint).then((res) => {\r\n            console.log(res)\r\n           \r\n            console.log(\"Pad text set: \")\r\n           // return res.data.data.padID\r\n        })\r\n    \r\n    }\r\n    \r\n    \r\n     const testPad_getHTML = async () => {\r\n    let padEndPoint_endpoint = `${endPoint(\"getHTML\")}` + `&padID=${testPadName}` \r\n    \r\n    return await axios.get(padEndPoint_endpoint).then((res) => {\r\n            console.log(res)\r\n           \r\n            console.log(\"Pad get HTML\")\r\n           // return res.data.data.padID\r\n           return res.data\r\n        })\r\n    }\r\n\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}