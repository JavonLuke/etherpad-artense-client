{"ast":null,"code":"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\"; //const eejs = require('ep_etherpad-lite/node/eejs/');\n//const settings = require('ep_etherpad-lite/node/utils/Settings');\n//exports.eejsBlock_editbarMenuRight = function (hook_name, args, cb) {\n//  args.content = eejs.content=\"foo\"; return cb(); };\n\nlet apiKey = \"308c704c36b41c846ba1713a59f92c6a9707ced910894de32070287a03bfcb68\";\nlet apiVersion = \"1.2.14\";\nlet site = \"localhost\";\nlet connectionType = \"http\";\nlet port = \":9001\"; // don't forget colon\n\nlet createAuthor_endpoint = 'createAuthor';\nlet createSession_endpoint = 'createSession';\nlet createGroup_endpoint = 'createGroup';\nlet validUntil_endpoint = 2312905480;\nlet createGroupPadID_endpoint = 'createGroupPad';\nlet defaultText = \"\";\nlet testText = \"this is the first sentence\";\nlet clientLocation = \"http://localhost:9001/p/\";\n\nconst endPoint = point => `${connectionType}://${site}${port}/api/${apiVersion}/${point}?apikey=${apiKey}`;\n\nexport const testPad = async () => {\n  console.log(\"Attempting to test pad\");\n  console.log(endPoint(createAuthor_endpoint));\n  let authorID = await axios.get(endPoint(createAuthor_endpoint)).then(res => {\n    console.log(\"Author Created: \" + res.data.data.authorID);\n    return res.data.data.authorID;\n  });\n  console.log(authorID);\n  let groupID = await axios.get(endPoint(createGroup_endpoint)).then(res => {\n    console.log(\"Group Created\" + res.data.data.groupID);\n    return res.data.data.groupID;\n  });\n  let sessionEndPoint = `${endPoint(createSession_endpoint)}` + `&authorID=${authorID}` + `&groupID=${groupID}` + `&validUntil=${validUntil_endpoint}`;\n  let sessionID = await axios.get(sessionEndPoint).then(res => {\n    console.log(res);\n    console.log(\"Session Created: \" + res.data.data.sessionID);\n    return res.data.data.sessionID;\n  });\n  let groupPadEndPoint_endpoint = `${endPoint(createGroupPadID_endpoint)}` + `&groupID=${groupID}` + `&padName=${\"testPadName\"}` + `&text=${testText}`;\n  let groupPadID = await axios.get(groupPadEndPoint_endpoint).then(res => {\n    console.log(res);\n    console.log(\"Group Pad Created: \" + res.data.data.padID);\n    return res.data.data.padID;\n  });\n  let padLocation = `${clientLocation}${groupPadID}`; // + translateEtherpadOptions(etherpadOptions)\n\n  return {\n    \"authorID\": authorID,\n    \"sessionID\": sessionID,\n    \"groupID\": groupID,\n    \"groupPadID\": groupPadID,\n    \"clientLocation\": clientLocation,\n    \"padLocation\": padLocation\n  };\n};\nexport const createGroupPad = async (groupID, etherpadOptions) => {\n  console.log(\"Attempting to create Pad\");\n\n  const translateEtherpadOptions = etherpadOptions => {\n    return \"?showChat=false&showLineNumbers=false\";\n  };\n\n  let authorID = await axios.get(endPoint(createAuthor_endpoint)).then(res => {\n    console.log(\"Author Created: \" + res.data.data.authorID);\n    return res.data.data.authorID;\n  });\n  groupID = await axios.get(endPoint(createGroup_endpoint)).then(res => {\n    console.log(\"Group Created\" + res.data.data.groupID);\n    return res.data.data.groupID;\n  });\n  let sessionEndPoint = `${endPoint(createSession_endpoint)}` + `&authorID=${authorID}` + `&groupID=${groupID}` + `&validUntil=${validUntil_endpoint}`;\n  let sessionID = await axios.get(sessionEndPoint).then(res => {\n    console.log(res);\n    console.log(\"Session Created: \" + res.data.data.sessionID);\n    return res.data.data.sessionID;\n  });\n  let groupPadEndPoint_endpoint = `${endPoint(createGroupPadID_endpoint)}` + `&groupID=${groupID}` + `&padName=${\"testPadName\"}` + `&text=${defaultText}`;\n  let groupPadID = await axios.get(groupPadEndPoint_endpoint).then(res => {\n    console.log(res);\n    console.log(\"Group Pad Created: \" + res.data.data.padID);\n    return res.data.data.padID;\n  });\n  let padLocation = `${clientLocation}${groupPadID}` + translateEtherpadOptions(etherpadOptions);\n  return {\n    \"authorID\": authorID,\n    \"sessionID\": sessionID,\n    \"groupID\": groupID,\n    \"groupPadID\": groupPadID,\n    \"clientLocation\": clientLocation,\n    \"padLocation\": padLocation\n  };\n};","map":{"version":3,"sources":["C:/Users/JP/Documents/GitHub/etherpad-artense-client/src/api/server.js"],"names":["axios","React","useEffect","useState","apiKey","apiVersion","site","connectionType","port","createAuthor_endpoint","createSession_endpoint","createGroup_endpoint","validUntil_endpoint","createGroupPadID_endpoint","defaultText","testText","clientLocation","endPoint","point","testPad","console","log","authorID","get","then","res","data","groupID","sessionEndPoint","sessionID","groupPadEndPoint_endpoint","groupPadID","padID","padLocation","createGroupPad","etherpadOptions","translateEtherpadOptions"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n//const eejs = require('ep_etherpad-lite/node/eejs/');\r\n//const settings = require('ep_etherpad-lite/node/utils/Settings');\r\n\r\n//exports.eejsBlock_editbarMenuRight = function (hook_name, args, cb) {\r\n//  args.content = eejs.content=\"foo\"; return cb(); };\r\nlet apiKey = \"308c704c36b41c846ba1713a59f92c6a9707ced910894de32070287a03bfcb68\"\r\nlet apiVersion = \"1.2.14\"\r\nlet site = \"localhost\"\r\nlet connectionType = \"http\"\r\nlet port = \":9001\" // don't forget colon\r\nlet createAuthor_endpoint = 'createAuthor'\r\nlet createSession_endpoint = 'createSession'\r\nlet createGroup_endpoint = 'createGroup'\r\nlet validUntil_endpoint = 2312905480;\r\nlet createGroupPadID_endpoint = 'createGroupPad'\r\nlet defaultText = \"\";\r\nlet testText = \"this is the first sentence\"\r\nlet clientLocation = \"http://localhost:9001/p/\"\r\n\r\nconst endPoint = (point) => `${connectionType}://${site}${port}/api/${apiVersion}/${point}?apikey=${apiKey}`;\r\n\r\nexport const testPad = async () => {\r\n    console.log(\"Attempting to test pad\")\r\n    console.log(endPoint(createAuthor_endpoint))\r\n    let authorID = await axios.get(endPoint(createAuthor_endpoint)).then((res) => {\r\n        console.log(\"Author Created: \" + res.data.data.authorID)\r\n        return res.data.data.authorID\r\n    })\r\n    console.log(authorID)\r\n    let groupID = await axios.get(endPoint(createGroup_endpoint)).then((res) => {\r\n        console.log(\"Group Created\" + res.data.data.groupID)\r\n        return res.data.data.groupID\r\n    })\r\n    \r\n    let sessionEndPoint = `${endPoint(createSession_endpoint)}` + `&authorID=${authorID}` + `&groupID=${groupID}` +\r\n    `&validUntil=${validUntil_endpoint}`\r\n\r\n    let sessionID = await axios.get(sessionEndPoint).then((res) => {\r\n        console.log(res)\r\n        console.log(\"Session Created: \" + res.data.data.sessionID)\r\n        return res.data.data.sessionID\r\n    })\r\n\r\n    let groupPadEndPoint_endpoint = `${endPoint(createGroupPadID_endpoint)}` + `&groupID=${groupID}` + `&padName=${\"testPadName\"}` +\r\n    `&text=${testText}`\r\n\r\n    let groupPadID = await axios.get(groupPadEndPoint_endpoint).then((res) => {\r\n        console.log(res)\r\n        console.log(\"Group Pad Created: \" + res.data.data.padID)\r\n        return res.data.data.padID\r\n    })\r\n\r\n    let padLocation = `${clientLocation}${groupPadID}`// + translateEtherpadOptions(etherpadOptions)\r\n\r\n    return { \"authorID\": authorID,\r\n    \"sessionID\": sessionID,\r\n    \"groupID\": groupID,\r\n\"groupPadID\": groupPadID,\r\n\"clientLocation\": clientLocation,\r\n\"padLocation\": padLocation}\r\n}\r\n\r\nexport const createGroupPad = async (groupID, etherpadOptions) => {\r\n    console.log(\"Attempting to create Pad\")\r\n\r\n    const translateEtherpadOptions = (etherpadOptions) => {\r\n        return \"?showChat=false&showLineNumbers=false\"\r\n      }\r\n\r\n    let authorID = await axios.get(endPoint(createAuthor_endpoint)).then((res) => {\r\n        console.log(\"Author Created: \" + res.data.data.authorID)\r\n        return res.data.data.authorID\r\n    })\r\n    groupID = await axios.get(endPoint(createGroup_endpoint)).then((res) => {\r\n        console.log(\"Group Created\" + res.data.data.groupID)\r\n        return res.data.data.groupID\r\n    })\r\n\r\n    \r\n    let sessionEndPoint = `${endPoint(createSession_endpoint)}` + `&authorID=${authorID}` + `&groupID=${groupID}` +\r\n    `&validUntil=${validUntil_endpoint}`\r\n\r\n    let sessionID = await axios.get(sessionEndPoint).then((res) => {\r\n        console.log(res)\r\n        console.log(\"Session Created: \" + res.data.data.sessionID)\r\n        return res.data.data.sessionID\r\n    })\r\n\r\n    let groupPadEndPoint_endpoint = `${endPoint(createGroupPadID_endpoint)}` + `&groupID=${groupID}` + `&padName=${\"testPadName\"}` +\r\n    `&text=${defaultText}`\r\n\r\n    let groupPadID = await axios.get(groupPadEndPoint_endpoint).then((res) => {\r\n        console.log(res)\r\n        console.log(\"Group Pad Created: \" + res.data.data.padID)\r\n        return res.data.data.padID\r\n    })\r\n\r\n    let padLocation = `${clientLocation}${groupPadID}` + translateEtherpadOptions(etherpadOptions)\r\n\r\n    return { \"authorID\": authorID,\r\n    \"sessionID\": sessionID,\r\n    \"groupID\": groupID,\r\n\"groupPadID\": groupPadID,\r\n\"clientLocation\": clientLocation,\r\n\"padLocation\": padLocation}\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}