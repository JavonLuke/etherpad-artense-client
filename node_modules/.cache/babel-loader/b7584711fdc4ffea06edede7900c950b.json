{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JP\\\\Documents\\\\GitHub\\\\etherpad-artense-client\\\\src\\\\components\\\\UserPads\\\\UserPads.js\",\n    _s = $RefreshSig$();\n\nimport * as pad from \"../../etherpad/Pad\";\nimport * as author from \"../../etherpad/Author\";\nimport { useEffect } from \"react\";\nimport * as React from 'react';\nimport { Table } from '@material-ui/core';\nimport { TableBody } from '@material-ui/core';\nimport { TableCell } from '@material-ui/core';\nimport { TableContainer } from '@material-ui/core';\nimport { TableHead } from '@material-ui/core';\nimport { TableRow } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ViewPad } from \"./ViewPad\"; //import Paper from '@mui/material/Paper';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserPads = props => {\n  _s();\n\n  const [authorID, setAuthorID] = useState(props.authorID);\n  const [padNames, setPadNames] = useState(Array());\n  useEffect(() => {\n    if (authorID) {\n      author.ListPadsOfAuthor(authorID).then(data => {\n        console.log(\"List author pads\");\n        console.log(data);\n        setPadNames(data);\n      }).catch(err => {\n        console.error(err);\n      });\n    } else {\n      pad.ListAllPads().then(data => {\n        var _data$data, _data$data2, _data$data2$data, _data$data3, _data$data3$data;\n\n        console.log(\"List all pads\");\n        console.log(data);\n        console.log(data === null || data === void 0 ? void 0 : data.data);\n        console.log(data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.data);\n        console.log(data === null || data === void 0 ? void 0 : (_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : (_data$data2$data = _data$data2.data) === null || _data$data2$data === void 0 ? void 0 : _data$data2$data.padIDs);\n        setPadNames(data === null || data === void 0 ? void 0 : (_data$data3 = data.data) === null || _data$data3 === void 0 ? void 0 : (_data$data3$data = _data$data3.data) === null || _data$data3$data === void 0 ? void 0 : _data$data3$data.padIDs);\n      }).catch(err => {\n        console.error(err);\n      });\n    }\n  }, [authorID]); //  \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        sx: {\n          minWidth: 650\n        },\n        \"aria-label\": \"simple table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Dessert (100g serving)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Calories\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Fat\\xA0(g)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Carbs\\xA0(g)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Protein\\xA0(g)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: padNames === null || padNames === void 0 ? void 0 : padNames.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n            sx: {\n              '&:last-child td, &:last-child th': {\n                border: 0\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              component: ViewPad,\n              to: `/pad/`,\n              children: row\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this)\n          }, row, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserPads, \"vOK07NRLlLzhynTMB7AdpQy6i+c=\");\n\n_c = UserPads;\nexport default UserPads;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPads\");","map":{"version":3,"sources":["C:/Users/JP/Documents/GitHub/etherpad-artense-client/src/components/UserPads/UserPads.js"],"names":["pad","author","useEffect","React","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","useState","Link","ViewPad","UserPads","props","authorID","setAuthorID","padNames","setPadNames","Array","ListPadsOfAuthor","then","data","console","log","catch","err","error","ListAllPads","padIDs","minWidth","map","row","border"],"mappings":"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","sourcesContent":["import * as pad from \"../../etherpad/Pad\"\r\nimport * as author from \"../../etherpad/Author\"\r\nimport { useEffect } from \"react\"\r\nimport * as React from 'react';\r\nimport {Table} from '@material-ui/core';\r\nimport {TableBody} from '@material-ui/core';\r\nimport {TableCell} from '@material-ui/core';\r\nimport {TableContainer} from '@material-ui/core';\r\nimport {TableHead} from '@material-ui/core';\r\nimport {TableRow} from '@material-ui/core';\r\nimport {Paper} from '@material-ui/core'\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {ViewPad} from \"./ViewPad\"\r\n//import Paper from '@mui/material/Paper';\r\n\r\nconst UserPads = (props) => {\r\n    const [authorID, setAuthorID] = useState(props.authorID)\r\n    const [padNames, setPadNames] = useState(Array())\r\n    \r\nuseEffect(() => {\r\n\r\n    if(authorID) {\r\n        author.ListPadsOfAuthor(authorID).then((data) => {\r\n            console.log(\"List author pads\")\r\n            console.log(data)\r\n            setPadNames(data)           \r\n        }).catch((err) => {\r\n            console.error(err)\r\n        })\r\n    } else {\r\n        pad.ListAllPads().then((data) => {\r\n            console.log(\"List all pads\")\r\n            console.log(data)\r\n            console.log(data?.data)\r\n            console.log(data?.data?.data)\r\n            console.log(data?.data?.data?.padIDs)\r\n            setPadNames(data?.data?.data?.padIDs)\r\n        }).catch((err) => {\r\n            console.error(err)\r\n        })\r\n    }\r\n}, [authorID])\r\n\r\n//  \r\n return(<div>\r\n\r\n<TableContainer component={Paper}>  \r\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Dessert (100g serving)</TableCell>\r\n              <TableCell align=\"right\">Calories</TableCell>\r\n              <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\r\n              <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\r\n              <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {padNames?.map((row) => (\r\n              <TableRow\r\n                key={row}\r\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\r\n                <TableCell align=\"right\" component={ViewPad} to={`/pad/`}>\r\n                    {row}</TableCell>       \r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n </div>)   \r\n    \r\n}\r\n\r\n\r\nexport default UserPads"]},"metadata":{},"sourceType":"module"}