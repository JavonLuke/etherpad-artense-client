{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JP\\\\Documents\\\\GitHub\\\\etherpad-artense-client\\\\src\\\\etherpad\\\\Pad.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListAllPads = async () => {\n  return axios.post('http://localhost:8080/listAllPads').catch(err => {\n    console.error(err);\n  });\n};\n_c = ListAllPads;\nexport const createPad = async () => {\n  console.log(\"CreatePad Front End\");\n  return fetch('http://localhost:8080/createPad', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    } //,      body: JSON.stringify(credentials)\n\n  }).then(data => {\n    console.log(data);\n    return data.json();\n  }).catch(err => {\n    console.error(err);\n  });\n};\nexport const Pad = props => {\n  _s();\n\n  const [padID, setPadID] = useState(undefined);\n  useEffect(() => {\n    var _props$location, _props$location$state;\n\n    if (padID === undefined) return;\n    let id = props === null || props === void 0 ? void 0 : (_props$location = props.location) === null || _props$location === void 0 ? void 0 : (_props$location$state = _props$location.state) === null || _props$location$state === void 0 ? void 0 : _props$location$state.padID;\n\n    if (!id) {\n      setPadID(createPad().padID);\n    } else {\n      setPadID(id);\n    }\n  }, [padID]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n      src: padID,\n      width: 600,\n      height: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 1\n  }, this);\n};\n\n_s(Pad, \"daH+dIcmTArHTbM/dwbNjlaiUaM=\");\n\n_c2 = Pad;\nexport const PadAPI = props => {\n  _s2();\n\n  // create Pad - ensure that you are logged in to create a pad\n  // get Pad - pass an iframe\n  // delete Pad\n  // get Pad HTML - pass html\n  // is valid author\n  const [authorID, setAuthorID] = useState(props.authorID);\n  const [padID, setPadID] = useState(props.padID);\n  const [etherpadOptions, setEtherpadOptions] = useState(props.etherpadOptions);\n  let apiKey = \"308c704c36b41c846ba1713a59f92c6a9707ced910894de32070287a03bfcb68\";\n  let apiVersion = \"1.2.14\";\n  let site = \"localhost\";\n  let connectionType = \"http\";\n  let port = \":9001\"; // don't forget colon\n\n  let createAuthor_endpoint = 'createAuthor';\n  let createSession_endpoint = 'createSession';\n  let createGroup_endpoint = 'createGroup';\n  let validUntil_endpoint = 2312905480;\n  let createGroupPadID_endpoint = 'createGroupPad';\n  let createPadID_endpoint = 'createPad';\n  let defaultText = \"\";\n  let testPadName = \"testCreatePad\";\n  let testText = \"this is the first sentence - testing\";\n  let clientLocation = \"http://localhost:9001/p/\";\n\n  const endPoint = point => `${connectionType}://${site}${port}/api/${apiVersion}/${point}?apikey=${apiKey}`;\n\n  const testPad = async () => {\n    console.log(\"Attempting to test pad\");\n    let authorID = await axios.get(endPoint(createAuthor_endpoint)).then(res => {\n      console.log(\"Author Created: \" + res.data.data.authorID);\n      return res.data.data.authorID;\n    });\n    console.log(authorID); // let groupPadEndPoint_endpoint = `${endPoint(createGroupPadID_endpoint)}` + `&groupID=${groupID}` + `&padName=${\"testPadName\"}` +\n    // `&text=${testText}`\n\n    let padEndPoint_endpoint = `${endPoint(createPadID_endpoint)}` + `&padID=testCreatePad` + `&text=${testText}`;\n    let groupPadID = await axios.get(padEndPoint_endpoint).then(res => {\n      console.log(res);\n\n      if (res.data.data === null) {\n        return \"testCreatePad\";\n      }\n\n      console.log(\"Pad Created: \" + res.data.data.padID);\n      return res.data.data.padID;\n    });\n    let padLocation = `${clientLocation}${groupPadID}`; // + translateEtherpadOptions(etherpadOptions)\n\n    return {\n      \"authorID\": authorID,\n      \"groupPadID\": groupPadID,\n      \"clientLocation\": clientLocation,\n      \"padLocation\": padLocation\n    };\n  };\n\n  const testPad_setText = async () => {\n    let padEndPoint_endpoint = `${endPoint(\"setText\")}` + `&padID=${testPadName}` + `&text=I Just Set the text`;\n    await axios.get(padEndPoint_endpoint).then(res => {\n      console.log(res);\n      console.log(\"Pad text set: \"); // return res.data.data.padID\n    });\n  };\n\n  const testPad_getHTML = async () => {\n    let padEndPoint_endpoint = `${endPoint(\"getHTML\")}` + `&padID=${testPadName}`;\n    return await axios.get(padEndPoint_endpoint).then(res => {\n      console.log(res);\n      console.log(\"Pad get HTML\"); // return res.data.data.padID\n\n      return res.data;\n    });\n  };\n};\n\n_s2(PadAPI, \"uKjtD7LaXQxXJT098SG1sY5oMxk=\");\n\n_c3 = PadAPI;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ListAllPads\");\n$RefreshReg$(_c2, \"Pad\");\n$RefreshReg$(_c3, \"PadAPI\");","map":{"version":3,"sources":["C:/Users/JP/Documents/GitHub/etherpad-artense-client/src/etherpad/Pad.js"],"names":["useEffect","useState","axios","ListAllPads","post","catch","err","console","error","createPad","log","fetch","method","headers","then","data","json","Pad","props","padID","setPadID","undefined","id","location","state","PadAPI","authorID","setAuthorID","etherpadOptions","setEtherpadOptions","apiKey","apiVersion","site","connectionType","port","createAuthor_endpoint","createSession_endpoint","createGroup_endpoint","validUntil_endpoint","createGroupPadID_endpoint","createPadID_endpoint","defaultText","testPadName","testText","clientLocation","endPoint","point","testPad","get","res","padEndPoint_endpoint","groupPadID","padLocation","testPad_setText","testPad_getHTML"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nexport const ListAllPads = async () => {\r\n    return axios.post('http://localhost:8080/listAllPads').catch((err) => {\r\n        console.error(err)\r\n    })\r\n}\r\n\r\n\r\n\r\nexport const createPad = async () => {\r\n    console.log(\"CreatePad Front End\")\r\n    \r\n    return fetch('http://localhost:8080/createPad', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }//,      body: JSON.stringify(credentials)\r\n    }).then((data) => {\r\n        console.log(data)\r\n        return data.json()}).catch((err) => {\r\n            console.error(err)\r\n        })\r\n      \r\n  }\r\n\r\n\r\nexport const Pad = (props) => {\r\n    const [padID, setPadID] = useState(undefined)\r\n\r\n\r\n    useEffect(() => {\r\n        if(padID === undefined) return\r\n\r\n\r\n        let id = props?.location?.state?.padID\r\n        if(!id) {\r\n            setPadID(createPad().padID)\r\n        } else {\r\n            setPadID(id)\r\n        }\r\n\r\n    }, [padID])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nreturn (\r\n<div>\r\n\r\n<iframe src={padID}\r\n        width={600}\r\n          height={400}\r\n        ></iframe>\r\n\r\n\r\n        </div>)\r\n\r\n\r\n}\r\n\r\n\r\nexport const PadAPI = (props) => {\r\n    // create Pad - ensure that you are logged in to create a pad\r\n    // get Pad - pass an iframe\r\n    // delete Pad\r\n    // get Pad HTML - pass html\r\n    // is valid author\r\n  \r\n    const [authorID, setAuthorID] = useState(props.authorID);\r\n    const [padID, setPadID] = useState(props.padID)\r\n    const [etherpadOptions, setEtherpadOptions] = useState(props.etherpadOptions);\r\n    let apiKey = \"308c704c36b41c846ba1713a59f92c6a9707ced910894de32070287a03bfcb68\"\r\n    let apiVersion = \"1.2.14\"\r\n    let site = \"localhost\"\r\n    let connectionType = \"http\"\r\n    let port = \":9001\" // don't forget colon\r\n    let createAuthor_endpoint = 'createAuthor'\r\n    let createSession_endpoint = 'createSession'\r\n    let createGroup_endpoint = 'createGroup'\r\n    let validUntil_endpoint = 2312905480;\r\n    let createGroupPadID_endpoint = 'createGroupPad'\r\n    let createPadID_endpoint = 'createPad'\r\n    let defaultText = \"\";\r\n    let testPadName = \"testCreatePad\"\r\n    let testText = \"this is the first sentence - testing\"\r\n    let clientLocation = \"http://localhost:9001/p/\"\r\n\r\n\r\n\r\n    const endPoint = (point) => `${connectionType}://${site}${port}/api/${apiVersion}/${point}?apikey=${apiKey}`;\r\n\r\n     const testPad = async () => {\r\n        console.log(\"Attempting to test pad\")\r\n        let authorID = await axios.get(endPoint(createAuthor_endpoint)).then((res) => {\r\n            console.log(\"Author Created: \" + res.data.data.authorID)\r\n            return res.data.data.authorID\r\n        })\r\n        console.log(authorID)\r\n        \r\n        \r\n       // let groupPadEndPoint_endpoint = `${endPoint(createGroupPadID_endpoint)}` + `&groupID=${groupID}` + `&padName=${\"testPadName\"}` +\r\n       // `&text=${testText}`\r\n        \r\n    \r\n    \r\n        let padEndPoint_endpoint = `${endPoint(createPadID_endpoint)}` + `&padID=testCreatePad` + `&text=${testText}`\r\n    \r\n        let groupPadID = await axios.get(padEndPoint_endpoint).then((res) => {\r\n            console.log(res)\r\n            if(res.data.data === null) {\r\n                return \"testCreatePad\"\r\n            }\r\n            console.log(\"Pad Created: \" + res.data.data.padID)\r\n            return res.data.data.padID\r\n        })\r\n    \r\n        let padLocation = `${clientLocation}${groupPadID}`// + translateEtherpadOptions(etherpadOptions)\r\n    \r\n        return { \"authorID\": authorID,\r\n        \r\n    \"groupPadID\": groupPadID,\r\n    \"clientLocation\": clientLocation,\r\n    \"padLocation\": padLocation}\r\n    }\r\n    \r\n     const testPad_setText = async () => {\r\n    \r\n        let padEndPoint_endpoint = `${endPoint(\"setText\")}` + `&padID=${testPadName}` + `&text=I Just Set the text`\r\n    \r\n     await axios.get(padEndPoint_endpoint).then((res) => {\r\n            console.log(res)\r\n           \r\n            console.log(\"Pad text set: \")\r\n           // return res.data.data.padID\r\n        })\r\n    \r\n    }\r\n    \r\n    \r\n     const testPad_getHTML = async () => {\r\n    let padEndPoint_endpoint = `${endPoint(\"getHTML\")}` + `&padID=${testPadName}` \r\n    \r\n    return await axios.get(padEndPoint_endpoint).then((res) => {\r\n            console.log(res)\r\n           \r\n            console.log(\"Pad get HTML\")\r\n           // return res.data.data.padID\r\n           return res.data\r\n        })\r\n    }\r\n\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}